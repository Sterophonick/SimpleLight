#include "equates.h"
#include "6502mac.h"

 .section .iwram, "ax", %progbits
 .subsection 0
 .align
 .pool

@	.include "equates.h"
@	.include "mem.h"
@	.include "6502mac.h"
@	.include "cart.h"
@	.include "memory.h"
@	.include "io.h"
@	.include "ppu.h"
@	.include "sound.h"
@	.include "speedhack_asm.h"
@	.include "timeout.h"

	global_func CPU_reset
	.global op_table
	global_func irq6502
	global_func check_irq
	global_func CheckI
	.global cpustate
	.global rommap
	.global frametotal

	.global GLOBAL_PTR_BASE

	.global rommap
	
	.global _m6502_pc
	.global _m6502_s
@	.global _scanline
	.global _lastbank
	
	.global _memmap_tbl
	.global _writemem_tbl
	
	.global _memmap_6
	.global _readmem_6
	.global _writemem_6
	
	.if PRG_BANK_SIZE == 4
	.global _memmap_7
	.global _readmem_7
	.global _writemem_7
	.endif
	
	global_func _GO
	
	global_func Vec6502
	
	@exports for speedhack finder
	global_func branchhack_back
	
	global_func _10
	global_func _30
	global_func _50
	global_func _70
	global_func _90
	global_func _B0
	global_func _D0
	global_func _F0
	global_func _4C

	global_func _10y
	global_func _30y
	global_func _50y
	global_func _70y
	global_func _90y
	global_func _B0y
	global_func _D0y
	global_func _F0y
	global_func _4Cy
	
	.global op_table
	.global _cpu_cycles

@----------------------------------------------------------------------------
_00:@   BRK
@----------------------------------------------------------------------------
@	.if DEBUG
@		adr r0,_00
@		mov r1,#0
@		bl debug_
@	.endif

	ldr_ r0,lastbank
	sub r1,m6502_pc,r0
	add r0,r1,#1
	push16			@save PC

	encodeP (B+R)		@save P

	ldr r12,=IRQ_VECTOR
	bl VecCont

	fetch 7
	.ltorg

	.pushsection .text, "ax", %progbits
@----------------------------------------------------------------------------
_01:@   ORA ($nn,X)
@----------------------------------------------------------------------------
	doIIX
	opORA
	fetch 6
	.popsection

@----------------------------------------------------------------------------
_05:@   ORA $nn
@----------------------------------------------------------------------------
	doZ
	opORA
	fetch 3
@----------------------------------------------------------------------------
_06:@   ASL $nn
@----------------------------------------------------------------------------
	doZ
	opASL_c
	fetch_c 5
@----------------------------------------------------------------------------
_08:@   PHP
@----------------------------------------------------------------------------
	encodeP (B+R)
	push8 r0
	fetch 3
@----------------------------------------------------------------------------
_09:@   ORA #$nn
@----------------------------------------------------------------------------
	doIMM
	opORA
	fetch 2
@----------------------------------------------------------------------------
_0A:@   ASL
@----------------------------------------------------------------------------
	adds m6502_a,m6502_a,m6502_a
	mov m6502_nz,m6502_a,asr#24		@NZ
	orr cycles,cycles,#CYC_C		@Prepare C
	fetch_c 2						@also subs carry
@----------------------------------------------------------------------------
_0D:@   ORA $nnnn
@----------------------------------------------------------------------------
	doABS
	opORA
	fetch 4
@----------------------------------------------------------------------------
_0E:@   ASL $nnnn
@----------------------------------------------------------------------------
	doABS
	opASL
	fetch 6
@----------------------------------------------------------------------------
_10:@   BPL *
@----------------------------------------------------------------------------
	tst m6502_nz,#0x80000000
	bne nobranch
	ldrsb r0,[m6502_pc],#1
	
	and r1,m6502_pc,#0xFF00
	add m6502_pc,m6502_pc,r0
	and r2,m6502_pc,#0xFF00
	cmp r1,r2
	subne cycles,cycles,#3*CYCLE
	fetch_branch 3
_10y:
	tst m6502_nz,#0x80000000
	bne nobranch
	ldrsb r0,[m6502_pc],#1
	cmp r0,#-4
	beq dobranchhack
branchhack_back:
	and r1,m6502_pc,#0xFF00
	add m6502_pc,m6502_pc,r0
	and r2,m6502_pc,#0xFF00
	cmp r1,r2
	subne cycles,cycles,#3*CYCLE
	fetch_branch 3
@----------------------------------------------------------------------------
_11:@   ORA ($nn),Y
@----------------------------------------------------------------------------
	doIIY_PAGECROSS
	opORA
	fetch 5
@----------------------------------------------------------------------------
_15:@   ORA $nn,X
@----------------------------------------------------------------------------
	doZIXf
	opORA
	fetch 4
@----------------------------------------------------------------------------
_16:@   ASL $nn,X
@----------------------------------------------------------------------------
	doZIXf
	opASL_c
	fetch_c 6
@----------------------------------------------------------------------------
_18:@   CLC
@----------------------------------------------------------------------------
	bic cycles,cycles,#CYC_C
	fetch 2
@----------------------------------------------------------------------------
_19:@   ORA $nnnn,Y
@----------------------------------------------------------------------------
	doAIY_PAGECROSS
	opORA
	fetch 4
@----------------------------------------------------------------------------
_1D:@   ORA $nnnn,X
@----------------------------------------------------------------------------
	doAIX_PAGECROSS
	opORA
	fetch 4
@----------------------------------------------------------------------------
_1E:@   ASL $nnnn,X
@----------------------------------------------------------------------------
	doAIX
	opASL
	fetch 7
@----------------------------------------------------------------------------
_20:@   JSR $nnnn
@----------------------------------------------------------------------------
	ldrb r2,[m6502_pc],#1
	ldr_ r1,lastbank
	sub r0,m6502_pc,r1
	ldrb r1,[m6502_pc]
	orr m6502_pc,r2,r1,lsl#8
	push16
	encodePC
	fetch 6

	.pushsection .text, "ax", %progbits
@----------------------------------------------------------------------------
_21:@   AND ($nn,X)
@----------------------------------------------------------------------------
	doIIX
	opAND
	fetch 6
	.popsection

@----------------------------------------------------------------------------
_24:@   BIT $nn
@----------------------------------------------------------------------------
	doZ
	opBIT
	fetch 3
@----------------------------------------------------------------------------
_25:@   AND $nn
@----------------------------------------------------------------------------
	doZ
	opAND
	fetch 3
@----------------------------------------------------------------------------
_26:@   ROL $nn
@----------------------------------------------------------------------------
	doZ
	opROL
	fetch 5
@----------------------------------------------------------------------------
_28:@   PLP
@----------------------------------------------------------------------------
	pop8 r0
	decodeP
	sub cycles,cycles,#4*3*CYCLE
	b check_irq
@	fetch 4

@todo: fix instruction to pass CLI latency test

@----------------------------------------------------------------------------
_29:@   AND #$nn
@----------------------------------------------------------------------------
	doIMM
	opAND
	fetch 2
@----------------------------------------------------------------------------
_2A:@   ROL
@----------------------------------------------------------------------------
	movs cycles,cycles,lsr#1		@get C
	orrcs m6502_a,m6502_a,#0x00800000
	adds m6502_a,m6502_a,m6502_a
	mov m6502_nz,m6502_a,asr#24		@NZ
	adc cycles,cycles,cycles		@Set C
	fetch 2
@----------------------------------------------------------------------------
_2C:@   BIT $nnnn
@----------------------------------------------------------------------------
	doABS
	opBIT
	fetch 4
@----------------------------------------------------------------------------
_2D:@   AND $nnnn
@----------------------------------------------------------------------------
	doABS
	opAND
	fetch 4
@----------------------------------------------------------------------------
_2E:@   ROL $nnnn
@----------------------------------------------------------------------------
	doABS
	opROL
	fetch 6
@----------------------------------------------------------------------------
_30:@   BMI *
@----------------------------------------------------------------------------
	tst m6502_nz,#0x80000000
	beq nobranch
	ldrsb r0,[m6502_pc],#1
	
	and r1,m6502_pc,#0xFF00
	add m6502_pc,m6502_pc,r0
	and r2,m6502_pc,#0xFF00
	cmp r1,r2
	subne cycles,cycles,#3*CYCLE
	fetch_branch 3
_30y:
	tst m6502_nz,#0x80000000
	beq nobranch
	ldrsb r0,[m6502_pc],#1
	cmp r0,#-4
	beq dobranchhack
	and r1,m6502_pc,#0xFF00
	add m6502_pc,m6502_pc,r0
	and r2,m6502_pc,#0xFF00
	cmp r1,r2
	subne cycles,cycles,#3*CYCLE
	fetch_branch 3
@----------------------------------------------------------------------------
_31:@   AND ($nn),Y
@----------------------------------------------------------------------------
	doIIY_PAGECROSS
	opAND
	fetch 5
@----------------------------------------------------------------------------
_35:@   AND $nn,X
@----------------------------------------------------------------------------
	doZIXf
	opAND
	fetch 4
@----------------------------------------------------------------------------
_36:@   ROL $nn,X
@----------------------------------------------------------------------------
	doZIXf
	opROL
	fetch 6
@----------------------------------------------------------------------------
_38:@   SEC
@----------------------------------------------------------------------------
	orr cycles,cycles,#CYC_C
	fetch 2
@----------------------------------------------------------------------------
_39:@   AND $nnnn,Y
@----------------------------------------------------------------------------
	doAIY_PAGECROSS
	opAND
	fetch 4
@----------------------------------------------------------------------------
_3D:@   AND $nnnn,X
@----------------------------------------------------------------------------
	doAIX_PAGECROSS
	opAND
	fetch 4
@----------------------------------------------------------------------------
_3E:@   ROL $nnnn,X
@----------------------------------------------------------------------------
	doAIX
	opROL
	fetch 7
@----------------------------------------------------------------------------
_40:@   RTI
@----------------------------------------------------------------------------
	pop8 r0		@pop 6502 flags and decode
	decodeP
	pop16		@pop the return address
	encodePC
	sub cycles,cycles,#6*3*CYCLE
	b check_irq			@Fixes Dragon Quest
@	fetch 6

@todo: fix instruction to pass CLI latency test

	.pushsection .text, "ax", %progbits
@----------------------------------------------------------------------------
_41:@   EOR ($nn,X)
@----------------------------------------------------------------------------
	doIIX
	opEOR
	fetch 6
	.popsection

@----------------------------------------------------------------------------
_45:@   EOR $nn
@----------------------------------------------------------------------------
	doZ
	opEOR
	fetch 3
@----------------------------------------------------------------------------
_46:@   LSR $nn
@----------------------------------------------------------------------------
	doZ
	opLSR_c
	fetch_c 5
@----------------------------------------------------------------------------
_48:@   PHA
@----------------------------------------------------------------------------
	mov r0,m6502_a,lsr#24
	push8 r0
	fetch 3
@----------------------------------------------------------------------------
_49:@   EOR #$nn
@----------------------------------------------------------------------------
	doIMM
	opEOR
	fetch 2
@----------------------------------------------------------------------------
_4A:@   LSR
@----------------------------------------------------------------------------
	movs m6502_nz,m6502_a,lsr#25	@Z, N=0
	mov m6502_a,m6502_nz,lsl#24		@result without garbage
	orr cycles,cycles,#CYC_C		@Prepare C
	fetch_c 2
@----------------------------------------------------------------------------
_4Cy:@   JMP $nnnn
@----------------------------------------------------------------------------
	ldr_ r0,speedhack_pc
	cmp m6502_pc,r0
	beq_long dobranchhackjmp
_4C:
	ldrb r0,[m6502_pc],#1
	ldrb r1,[m6502_pc]
	orr m6502_pc,r0,r1,lsl#8
	encodePC
	fetch 3

	.ltorg
@----------------------------------------------------------------------------
_4D:@   EOR $nnnn
@----------------------------------------------------------------------------
	doABS
	opEOR
	fetch 4
@----------------------------------------------------------------------------
_4E:@   LSR $nnnn
@----------------------------------------------------------------------------
	doABS
	opLSR
	fetch 6
@----------------------------------------------------------------------------
_50:@   BVC *
@----------------------------------------------------------------------------
	tst cycles,#CYC_V
	bne nobranch
	ldrsb r0,[m6502_pc],#1
	
	and r1,m6502_pc,#0xFF00
	add m6502_pc,m6502_pc,r0
	and r2,m6502_pc,#0xFF00
	cmp r1,r2
	subne cycles,cycles,#3*CYCLE
	fetch_branch 3
_50y:
	tst cycles,#CYC_V
	bne nobranch
	ldrsb r0,[m6502_pc],#1
	cmp r0,#-4
	beq dobranchhack
	and r1,m6502_pc,#0xFF00
	add m6502_pc,m6502_pc,r0
	and r2,m6502_pc,#0xFF00
	cmp r1,r2
	subne cycles,cycles,#3*CYCLE
	fetch_branch 3
@----------------------------------------------------------------------------
_51:@   EOR ($nn),Y
@----------------------------------------------------------------------------
	doIIY_PAGECROSS
	opEOR
	fetch 5
@----------------------------------------------------------------------------
_55:@   EOR $nn,X
@----------------------------------------------------------------------------
	doZIXf
	opEOR
	fetch 4
@----------------------------------------------------------------------------
_56:@   LSR $nn,X
@----------------------------------------------------------------------------
	doZIXf
	opLSR_c
	fetch_c 6
@----------------------------------------------------------------------------
_58:@   CLI
@----------------------------------------------------------------------------
	bic cycles,cycles,#CYC_I
	sub cycles,cycles,#2*3*CYCLE	@???
	b check_irq			@Fixes Dragon Quest
@	fetch 2

@todo: fix instruction to pass CLI latency test

@----------------------------------------------------------------------------
_59:@   EOR $nnnn,Y
@----------------------------------------------------------------------------
	doAIY_PAGECROSS
	opEOR
	fetch 4
@----------------------------------------------------------------------------
_5D:@   EOR $nnnn,X
@----------------------------------------------------------------------------
	doAIX_PAGECROSS
	opEOR
	fetch 4
@----------------------------------------------------------------------------
_5E:@   LSR $nnnn,X
@----------------------------------------------------------------------------
	doAIX
	opLSR
	fetch 7
@----------------------------------------------------------------------------
_60:@   RTS
@----------------------------------------------------------------------------
	pop16
	add m6502_pc,m6502_pc,#1
	encodePC
	fetch 6

	.pushsection .text, "ax", %progbits
@----------------------------------------------------------------------------
_61:@   ADC ($nn,X)
@----------------------------------------------------------------------------
	doIIX
	opADC
	fetch_c 6
	.popsection

@----------------------------------------------------------------------------
_65:@   ADC $nn
@----------------------------------------------------------------------------
	doZ
	opADC
	fetch_c 3
@----------------------------------------------------------------------------
_66:@   ROR $nn
@----------------------------------------------------------------------------
	doZ
	opROR
	fetch 5
@----------------------------------------------------------------------------
_68:@   PLA
@----------------------------------------------------------------------------
	pop8 m6502_nz
	mov m6502_a,m6502_nz,lsl#24
	fetch 4
@----------------------------------------------------------------------------
_69:@   ADC #$nn
@----------------------------------------------------------------------------
	doIMM
	opADC
	fetch_c 2
@----------------------------------------------------------------------------
_6A:@   ROR
@----------------------------------------------------------------------------
	movs cycles,cycles,lsr#1		@get C
	mov m6502_a,m6502_a,rrx
	movs m6502_nz,m6502_a,asr#24	@NZ
	and m6502_a,m6502_a,#0xff000000
	adc cycles,cycles,cycles		@Set C
	fetch 2
@----------------------------------------------------------------------------
_6C:@   JMP ($nnnn)
@----------------------------------------------------------------------------
	doABS
	and r2,addy,#PRG_BANK_MASK
	ldr r1,[m6502_mmap,r2,lsr#(PRG_BANK_SHIFT-2)]
	ldrb m6502_pc,[r1,addy]!
@	.if HAPPY_CPU_TESTER
	@wrap fix to make CPU testers happy
	mov r0,addy,lsl#24
	adds r0,r0,#0x01000000
	subcs r1,r1,#0x100
@	.endif
	ldrb r0,[r1,#1]
	orr m6502_pc,m6502_pc,r0,lsl#8
	encodePC
	fetch 5
@----------------------------------------------------------------------------
_6D:@   ADC $nnnn
@----------------------------------------------------------------------------
	doABS
	opADC
	fetch_c 4
@----------------------------------------------------------------------------
_6E:@   ROR $nnnn
@----------------------------------------------------------------------------
	doABS
	opROR
	fetch 6
@----------------------------------------------------------------------------
_70:@   BVS *
@----------------------------------------------------------------------------
	tst cycles,#CYC_V
	beq nobranch
	ldrsb r0,[m6502_pc],#1
	
	and r1,m6502_pc,#0xFF00
	add m6502_pc,m6502_pc,r0
	and r2,m6502_pc,#0xFF00
	cmp r1,r2
	subne cycles,cycles,#3*CYCLE
	fetch_branch 3
_70y:
	tst cycles,#CYC_V
	beq nobranch
	ldrsb r0,[m6502_pc],#1
	cmp r0,#-4
	beq dobranchhack
	and r1,m6502_pc,#0xFF00
	add m6502_pc,m6502_pc,r0
	and r2,m6502_pc,#0xFF00
	cmp r1,r2
	subne cycles,cycles,#3*CYCLE
	fetch_branch 3
@----------------------------------------------------------------------------
_71:@   ADC ($nn),Y
@----------------------------------------------------------------------------
	doIIY_PAGECROSS
	opADC
	fetch_c 5
@----------------------------------------------------------------------------
_75:@   ADC $nn,X
@----------------------------------------------------------------------------
	doZIXf
	opADC
	fetch_c 4
@----------------------------------------------------------------------------
_76:@   ROR $nn,X
@----------------------------------------------------------------------------
	doZIXf
	opROR
	fetch 6
@----------------------------------------------------------------------------
_78:@   SEI
@----------------------------------------------------------------------------
	orr cycles,cycles,#CYC_I
	fetch 2
@----------------------------------------------------------------------------
_79:@   ADC $nnnn,Y
@----------------------------------------------------------------------------
	doAIY_PAGECROSS
	opADC
	fetch_c 4
@----------------------------------------------------------------------------
_7D:@   ADC $nnnn,X
@----------------------------------------------------------------------------
	doAIX_PAGECROSS
	opADC
	fetch_c 4
@----------------------------------------------------------------------------
_7E:@   ROR $nnnn,X
@----------------------------------------------------------------------------
	doAIX
	opROR
	fetch 7
@----------------------------------------------------------------------------
_81:@   STA ($nn,X)
@----------------------------------------------------------------------------
	doIIX
	opSTORE m6502_a
	fetch 6
@----------------------------------------------------------------------------
_84:@   STY $nn
@----------------------------------------------------------------------------
	doZ
	opSTORE m6502_y
	fetch 3
@----------------------------------------------------------------------------
_85:@   STA $nn
@----------------------------------------------------------------------------
	doZ
	opSTORE m6502_a
	fetch 3
@----------------------------------------------------------------------------
_86:@   STX $nn
@----------------------------------------------------------------------------
	doZ
	opSTORE m6502_x
	fetch 3
@----------------------------------------------------------------------------
_88:@   DEY
@----------------------------------------------------------------------------
	sub m6502_y,m6502_y,#0x01000000
	mov m6502_nz,m6502_y,asr#24
	fetch 2
@----------------------------------------------------------------------------
_8A:@   TXA
@----------------------------------------------------------------------------
	mov m6502_a,m6502_x
	mov m6502_nz,m6502_x,asr#24
	fetch 2
@----------------------------------------------------------------------------
_8C:@   STY $nnnn
@----------------------------------------------------------------------------
	doABS
	opSTORE m6502_y
	fetch 4
@----------------------------------------------------------------------------
_8D:@   STA $nnnn
@----------------------------------------------------------------------------
	doABS
	opSTORE m6502_a
	fetch 4
@----------------------------------------------------------------------------
_8E:@   STX $nnnn
@----------------------------------------------------------------------------
	doABS
	opSTORE m6502_x
	fetch 4
@----------------------------------------------------------------------------
_90:@   BCC *
@----------------------------------------------------------------------------
	tst cycles,#CYC_C			@Test Carry
	bne nobranch
	ldrsb r0,[m6502_pc],#1
	
	and r1,m6502_pc,#0xFF00
	add m6502_pc,m6502_pc,r0
	and r2,m6502_pc,#0xFF00
	cmp r1,r2
	subne cycles,cycles,#3*CYCLE
	fetch_branch 3
_90y:
	tst cycles,#CYC_C			@Test Carry
	bne nobranch
	ldrsb r0,[m6502_pc],#1
	cmp r0,#-4
	beq dobranchhack
	and r1,m6502_pc,#0xFF00
	add m6502_pc,m6502_pc,r0
	and r2,m6502_pc,#0xFF00
	cmp r1,r2
	subne cycles,cycles,#3*CYCLE
	fetch_branch 3
@----------------------------------------------------------------------------
_91:@   STA ($nn),Y
@----------------------------------------------------------------------------
	doIIY
	opSTORE m6502_a
	fetch 6
@----------------------------------------------------------------------------
_94:@   STY $nn,X
@----------------------------------------------------------------------------
	doZIXf
	opSTORE m6502_y
	fetch 4
@----------------------------------------------------------------------------
_95:@   STA $nn,X
@----------------------------------------------------------------------------
	doZIXf
	opSTORE m6502_a
	fetch 4
@----------------------------------------------------------------------------
_96:@   STX $nn,Y
@----------------------------------------------------------------------------
	doZIYf
	opSTORE m6502_x
	fetch 4
@----------------------------------------------------------------------------
_98:@   TYA
@----------------------------------------------------------------------------
	mov m6502_a,m6502_y
	mov m6502_nz,m6502_y,asr#24
	fetch 2
@----------------------------------------------------------------------------
_99:@   STA $nnnn,Y
@----------------------------------------------------------------------------
	doAIY
	opSTORE m6502_a
	fetch 5
@----------------------------------------------------------------------------
_9A:@   TXS
@----------------------------------------------------------------------------
	mov r0,m6502_x,lsr#24
	strb_ r0,m6502_s
	fetch 2
@----------------------------------------------------------------------------
_9D:@   STA $nnnn,X
@----------------------------------------------------------------------------
	doAIX
	opSTORE m6502_a
	fetch 5
@----------------------------------------------------------------------------
_A0:@   LDY #$nn
@----------------------------------------------------------------------------
	doIMM
	opLOAD m6502_y
	fetch 2
@----------------------------------------------------------------------------
_A1:@   LDA ($nn,X)
@----------------------------------------------------------------------------
	doIIX
	opLOAD m6502_a
	fetch 6
@----------------------------------------------------------------------------
_A2:@   LDX #$nn
@----------------------------------------------------------------------------
	doIMM
	opLOAD m6502_x
	fetch 2
@----------------------------------------------------------------------------
_A4:@   LDY $nn
@----------------------------------------------------------------------------
	doZ
	opLOAD m6502_y
	fetch 3
@----------------------------------------------------------------------------
_A5:@   LDA $nn
@----------------------------------------------------------------------------
	doZ
	opLOAD m6502_a
	fetch 3
@----------------------------------------------------------------------------
_A6:@   LDX $nn
@----------------------------------------------------------------------------
	doZ
	opLOAD m6502_x
	fetch 3
@----------------------------------------------------------------------------
_A8:@   TAY
@----------------------------------------------------------------------------
	mov m6502_y,m6502_a
	mov m6502_nz,m6502_y,asr#24
	fetch 2
@----------------------------------------------------------------------------
_A9:@   LDA #$nn
@----------------------------------------------------------------------------
	doIMM
	opLOAD m6502_a
	fetch 2
@----------------------------------------------------------------------------
_AA:@   TAX
@----------------------------------------------------------------------------
	mov m6502_x,m6502_a
	mov m6502_nz,m6502_x,asr#24
	fetch 2
@----------------------------------------------------------------------------
_AC:@   LDY $nnnn
@----------------------------------------------------------------------------
	doABS
	opLOAD m6502_y
	fetch 4
@----------------------------------------------------------------------------
_AD:@   LDA $nnnn
@----------------------------------------------------------------------------
	doABS
	opLOAD m6502_a
	fetch 4
@----------------------------------------------------------------------------
_AE:@   LDX $nnnn
@----------------------------------------------------------------------------
	doABS
	opLOAD m6502_x
	fetch 4
@----------------------------------------------------------------------------
_B0:@   BCS *
@----------------------------------------------------------------------------
	tst cycles,#CYC_C			@Test Carry
	beq nobranch
	ldrsb r0,[m6502_pc],#1
	
	and r1,m6502_pc,#0xFF00
	add m6502_pc,m6502_pc,r0
	and r2,m6502_pc,#0xFF00
	cmp r1,r2
	subne cycles,cycles,#3*CYCLE
	fetch_branch 3
_B0y:
	tst cycles,#CYC_C			@Test Carry
	beq nobranch
	ldrsb r0,[m6502_pc],#1
	cmp r0,#-4
	beq dobranchhack
	and r1,m6502_pc,#0xFF00
	add m6502_pc,m6502_pc,r0
	and r2,m6502_pc,#0xFF00
	cmp r1,r2
	subne cycles,cycles,#3*CYCLE
	fetch_branch 3
@----------------------------------------------------------------------------
_B1:@   LDA ($nn),Y
@----------------------------------------------------------------------------
	doIIY_PAGECROSS
	opLOAD m6502_a
	fetch 5
@----------------------------------------------------------------------------
_B4:@   LDY $nn,X
@----------------------------------------------------------------------------
	doZIX
	opLOAD m6502_y
	fetch 4
@----------------------------------------------------------------------------
_B5:@   LDA $nn,X
@----------------------------------------------------------------------------
	doZIX
	opLOAD m6502_a
	fetch 4
@----------------------------------------------------------------------------
_B6:@   LDX $nn,Y
@----------------------------------------------------------------------------
	doZIY
	opLOAD m6502_x
	fetch 4
@----------------------------------------------------------------------------
_B8:@   CLV
@----------------------------------------------------------------------------
	bic cycles,cycles,#CYC_V
	fetch 2
@----------------------------------------------------------------------------
_B9:@   LDA $nnnn,Y
@----------------------------------------------------------------------------
	doAIY_PAGECROSS  @for Battletoads
	opLOAD m6502_a
	fetch 4
@----------------------------------------------------------------------------
_BA:@   TSX
@----------------------------------------------------------------------------
	ldrb_ m6502_x,m6502_s
	mov m6502_x,m6502_x,lsl#24
	mov m6502_nz,m6502_x,asr#24
	fetch 2
@----------------------------------------------------------------------------
_BC:@   LDY $nnnn,X
@----------------------------------------------------------------------------
	doAIX_PAGECROSS
	opLOAD m6502_y
	fetch 4
@----------------------------------------------------------------------------
_BD:@   LDA $nnnn,X
@----------------------------------------------------------------------------
	doAIX_PAGECROSS
	opLOAD m6502_a
	fetch 4
@----------------------------------------------------------------------------
_BE:@   LDX $nnnn,Y
@----------------------------------------------------------------------------
	doAIY_PAGECROSS
	opLOAD m6502_x
	fetch 4
@----------------------------------------------------------------------------
_C0:@   CPY #$nn
@----------------------------------------------------------------------------
	doIMM
	opCOMP m6502_y
	fetch_c 2

	.pushsection .text, "ax", %progbits
@----------------------------------------------------------------------------
_C1:@   CMP ($nn,X)
@----------------------------------------------------------------------------
	doIIX
	opCOMP m6502_a
	fetch_c 6
	.popsection

@----------------------------------------------------------------------------
_C4:@   CPY $nn
@----------------------------------------------------------------------------
	doZ
	opCOMP m6502_y
	fetch_c 3
@----------------------------------------------------------------------------
_C5:@   CMP $nn
@----------------------------------------------------------------------------
	doZ
	opCOMP m6502_a
	fetch_c 3
@----------------------------------------------------------------------------
_C6:@   DEC $nn
@----------------------------------------------------------------------------
	doZ
	opDEC
	fetch 5
@----------------------------------------------------------------------------
_C8:@   INY
@----------------------------------------------------------------------------
	add m6502_y,m6502_y,#0x01000000
	mov m6502_nz,m6502_y,asr#24
	fetch 2
@----------------------------------------------------------------------------
_C9:@   CMP #$nn
@----------------------------------------------------------------------------
	doIMM
	opCOMP m6502_a
	fetch_c 2
@----------------------------------------------------------------------------
_CA:@   DEX
@----------------------------------------------------------------------------
	sub m6502_x,m6502_x,#0x01000000
	mov m6502_nz,m6502_x,asr#24
	fetch 2
@----------------------------------------------------------------------------
_CC:@   CPY $nnnn
@----------------------------------------------------------------------------
	doABS
	opCOMP m6502_y
	fetch_c 4
@----------------------------------------------------------------------------
_CD:@   CMP $nnnn
@----------------------------------------------------------------------------
	doABS
	opCOMP m6502_a
	fetch_c 4
@----------------------------------------------------------------------------
_CE:@   DEC $nnnn
@----------------------------------------------------------------------------
	doABS
	opDEC
	fetch 6
@----------------------------------------------------------------------------
_D0:@   BNE *
@----------------------------------------------------------------------------
	tst m6502_nz,#0xff
	beq nobranch
	ldrsb r0,[m6502_pc],#1
	
	and r1,m6502_pc,#0xFF00
	add m6502_pc,m6502_pc,r0
	and r2,m6502_pc,#0xFF00
	cmp r1,r2
	subne cycles,cycles,#3*CYCLE
	fetch_branch 3
_D0y:
	tst m6502_nz,#0xff
	beq nobranch
	ldrsb r0,[m6502_pc],#1
	cmp r0,#-4
	beq dobranchhackbne
	and r1,m6502_pc,#0xFF00
	add m6502_pc,m6502_pc,r0
	and r2,m6502_pc,#0xFF00
	cmp r1,r2
	subne cycles,cycles,#3*CYCLE
	fetch_branch 3
@----------------------------------------------------------------------------
_D1:@   CMP ($nn),Y
@----------------------------------------------------------------------------
	doIIY_PAGECROSS
	opCOMP m6502_a
	fetch_c 5
@----------------------------------------------------------------------------
_D5:@   CMP $nn,X
@----------------------------------------------------------------------------
	doZIXf
	opCOMP m6502_a
	fetch_c 4
@----------------------------------------------------------------------------
_D6:@   DEC $nn,X
@----------------------------------------------------------------------------
	doZIXf
	opDEC
	fetch 6
@----------------------------------------------------------------------------
_D8:@   CLD
@----------------------------------------------------------------------------
	bic cycles,cycles,#CYC_D
	fetch 2
@----------------------------------------------------------------------------
_D9:@   CMP $nnnn,Y
@----------------------------------------------------------------------------
	doAIY_PAGECROSS
	opCOMP m6502_a
	fetch_c 4
@----------------------------------------------------------------------------
_DD:@   CMP $nnnn,X
@----------------------------------------------------------------------------
	doAIX_PAGECROSS
	opCOMP m6502_a
	fetch_c 4
@----------------------------------------------------------------------------
_DE:@   DEC $nnnn,X
@----------------------------------------------------------------------------
	doAIX
	opDEC
	fetch 7
@----------------------------------------------------------------------------
_E0:@   CPX #$nn
@----------------------------------------------------------------------------
	doIMM
	opCOMP m6502_x
	fetch_c 2

	.pushsection .text, "ax", %progbits
@----------------------------------------------------------------------------
_E1:@   SBC ($nn,X)
@----------------------------------------------------------------------------
	doIIX
	opSBC
	fetch_c 6
	.popsection

@----------------------------------------------------------------------------
_E4:@   CPX $nn
@----------------------------------------------------------------------------
	doZ
	opCOMP m6502_x
	fetch_c 3
@----------------------------------------------------------------------------
_E5:@   SBC $nn
@----------------------------------------------------------------------------
	doZ
	opSBC
	fetch_c 3
@----------------------------------------------------------------------------
_E6:@   INC $nn
@----------------------------------------------------------------------------
	doZ
	opINC
	fetch 5
@----------------------------------------------------------------------------
_E8:@   INX
@----------------------------------------------------------------------------
	add m6502_x,m6502_x,#0x01000000
	mov m6502_nz,m6502_x,asr#24
	fetch 2
@----------------------------------------------------------------------------
_E9:@   SBC #$nn
@----------------------------------------------------------------------------
	doIMM
	opSBC
	fetch_c 2
@----------------------------------------------------------------------------
_EA:@   NOP
@----------------------------------------------------------------------------
	fetch 2
@----------------------------------------------------------------------------
_EC:@   CPX $nnnn
@----------------------------------------------------------------------------
	doABS
	opCOMP m6502_x
	fetch_c 4
@----------------------------------------------------------------------------
_ED:@   SBC $nnnn
@----------------------------------------------------------------------------
	doABS
	opSBC
	fetch_c 4
@----------------------------------------------------------------------------
_EE:@   INC $nnnn
@----------------------------------------------------------------------------
	doABS
	opINC
	fetch 6
@----------------------------------------------------------------------------
_F0:@   BEQ *
@----------------------------------------------------------------------------
	tst m6502_nz,#0xff
	bne nobranch
	ldrsb r0,[m6502_pc],#1
	
	and r1,m6502_pc,#0xFF00
	add m6502_pc,m6502_pc,r0
	and r2,m6502_pc,#0xFF00
	cmp r1,r2
	subne cycles,cycles,#3*CYCLE
	fetch_branch 3
_F0y:
	tst m6502_nz,#0xff
	bne nobranch
	ldrsb r0,[m6502_pc],#1
	cmp r0,#-4
	beq dobranchhack
	and r1,m6502_pc,#0xFF00
	add m6502_pc,m6502_pc,r0
	and r2,m6502_pc,#0xFF00
	cmp r1,r2
	subne cycles,cycles,#3*CYCLE
	fetch_branch 3
nobranch:	
	add m6502_pc,m6502_pc,#1
	fetch 2
dobranchhackbne:
	ldr_ r1,speedhack_pc
	cmp m6502_pc,r1
	beq_long dobranchhack2
	cmp r0,#-3
	beq_long dobnehack
	b branchhack_back
dobranchhack:
	ldr_ r1,speedhack_pc
	cmp m6502_pc,r1
	bne branchhack_back
	b_long dobranchhack2
@----------------------------------------------------------------------------
_F1:@   SBC ($nn),Y
@----------------------------------------------------------------------------
	doIIY_PAGECROSS
	opSBC
	fetch_c 5
@----------------------------------------------------------------------------
_F5:@   SBC $nn,X
@----------------------------------------------------------------------------
	doZIXf
	opSBC
	fetch_c 4
@----------------------------------------------------------------------------
_F6:@   INC $nn,X
@----------------------------------------------------------------------------
	doZIXf
	opINC
	fetch 6
@----------------------------------------------------------------------------
_F8:@   SED
@----------------------------------------------------------------------------
	orr cycles,cycles,#CYC_D
	fetch 2
@----------------------------------------------------------------------------
_F9:@   SBC $nnnn,Y
@----------------------------------------------------------------------------
	doAIY_PAGECROSS
	opSBC
	fetch_c 4
@----------------------------------------------------------------------------
_FD:@   SBC $nnnn,X
@----------------------------------------------------------------------------
	doAIX_PAGECROSS
	opSBC
	fetch_c 4
@----------------------------------------------------------------------------
_FE:@   INC $nnnn,X
@----------------------------------------------------------------------------
	doAIX
	opINC
	fetch 7

@-----------------------------------------------------------
check_irq:
@-----------------------------------------------------------
	ldrb_ r0,wantirq
	movs r0,r0
	bne CheckI
	@code continues to _GO
@-----------------------------------------------------------
_GO:
@-----------------------------------------------------------
	fetch 0
@-----------------------------------------------------------
CheckI:
@-----------------------------------------------------------
	@verify ints are not disabled
	tst cycles,#CYC_I
	bne _GO
	@code continues to irq6502 below
@----------------------------------------------------------
irq6502:
@----------------------------------------------------------
	ldr r12,=IRQ_VECTOR
	bl Vec6502
	fetch 7
@----------------------------------------------------------
Vec6502:
@----------------------------------------------------------
	ldr_ r0,lastbank
	sub r0,m6502_pc,r0
	push16					@save PC
	
	encodeP (R)				@save P
VecCont:
	push8 r0
	
	orr cycles,cycles,#CYC_I	@disable IRQ
	
	ldr_ r0,memmap_tbl+(PRG_BANK_COUNT-1)*4
	ldrb m6502_pc,[r0,r12]!
	ldrb r2,[r0,#1]
	orr m6502_pc,m6502_pc,r2,lsl#8
	encodePC				@get IRQ vector
	
	bx lr

 .align
 .pool
 .text
 .align
 .pool

@----------------------------------------------------------------------------
_xx:@	???					;invalid opcode
@----------------------------------------------------------------------------
@	.if DEBUG
@		adr r0,_xx
@		mov r1,#0
@		bl debug_
@	.endif
	mov r11,r11
	fetch 2

@illegal SLO instruction

@----------------------------------------------------------------------------
_07:@	SLO $nn
@----------------------------------------------------------------------------
	doZ
	opSLO_c
	fetch_c 5
@----------------------------------------------------------------------------
_0F:@	SLO $nnnn
@----------------------------------------------------------------------------
	doABS
	opSLO
	fetch 6
@----------------------------------------------------------------------------
_17:@	SLO $nn,X
@----------------------------------------------------------------------------
	doZIXf
	opSLO_c
	fetch_c 6
@----------------------------------------------------------------------------
_1B:@	SLO $nnnn,Y
@----------------------------------------------------------------------------
	doAIY
	opSLO
	fetch 7
@----------------------------------------------------------------------------
_1F:@	SLO $nnnn,X
@----------------------------------------------------------------------------
	doAIX
	opSLO
	fetch 7

@----------------------------------------------------------------------------
_x2:@	DOP  ;2 cycle double nop (_89 for Puzznic)
@----------------------------------------------------------------------------
	add m6502_pc,m6502_pc,#1
	fetch 2
@----------------------------------------------------------------------------
_x3:@	DOP  ;3 cycle double nop
@----------------------------------------------------------------------------
	add m6502_pc,m6502_pc,#1
	fetch 3
@----------------------------------------------------------------------------
_x4:@	DOP  ;4 cycle double nop
@----------------------------------------------------------------------------
	add m6502_pc,m6502_pc,#1
	fetch 4
@----------------------------------------------------------------------------
_x5:@	;3 byte nop, 4 cycles
@----------------------------------------------------------------------------
	add m6502_pc,m6502_pc,#2
	fetch 4
@----------------------------------------------------------------------------
_xC:@	;3 byte nop, 4 cycles, plus 1 for page cross
@----------------------------------------------------------------------------
	ldrb addy,[m6502_pc],#2
	adds r0,m6502_x,addy,lsl#24
	subcs cycles,cycles,#CYCLE*3
	fetch 4

@----------------------------------------------------------------------------
_B3:@   LAX ($nn),Y   ;illegal instruction used by Super Cars
@----------------------------------------------------------------------------
	doIIY_PAGECROSS	
	opLOAD m6502_a
	mov m6502_x,m6502_a
	fetch 5

sram_W2_instruction_save32:
 		nop
sram_W2_instruction_save64:
		add r1,r1,#0x8000

@----------------------------------------------------------------------------
_CB:@	AXS #nn          ;CMP+DEX  X=(X AND A)-nn
@----------------------------------------------------------------------------
	ldrb r0,[m6502_pc],#1
	and m6502_x,m6502_a,m6502_x
	subs m6502_x,m6502_x,r0,lsl#24
	mov m6502_nz,m6502_x,asr#24
	fetch_c 2
@----------------------------------------------------------------------------
_8F:@	SAX nnnn		;SAX nnnn    STA+STX  [nnnn]=A AND X
@----------------------------------------------------------------------------
	doABS
	and r0,m6502_a,m6502_x
	mov r0,r0,lsr#24
	writemem
	fetch 4


@----------------------------------------------------------------------------
CPU_reset:	@called by loadcart (r0-r9 are free to use)
@----------------------------------------------------------------------------
	str lr,[sp,#-4]!
	
@---SRAM setup
	.if CARTSAVE
	ldrb_ r0,cartflags
	tst r0,#SRAM			@use sram?
	ldrne r1,=sram_W2			@write to cart sram
	strne_ r1,writemem_6
.if PRG_BANK_SIZE == 4	
	strne_ r1,writemem_7
.endif
	@IMPORT save_start
	@IMPORT sram_W2_modify
	ldr r0,=save_start
	ldr r0,[r0]
	cmp r0,#0xE000
	
	ldreq r0,sram_W2_instruction_save64
	ldrne r0,sram_W2_instruction_save32
	ldr r1,=sram_W2_modify
	str r0,[r1]
	.endif
@---NTSC/PAL
	bl ntsc_pal_reset
@---cpu reset
	bl cpuhack_reset

	mov m6502_a,#0
	mov m6502_x,#0
	mov m6502_y,#0
	mov m6502_nz,#0
	adr_ m6502_mmap,memmap_tbl
	ldr r0,=NES_RAM+0x100
	str_ r0,m6502_s		@S=0xFD (0x100-3)
	bic cycles,cycles,#D+C+V+I
@	mov cycles,#0		@D=0, C=0, V=0, I=1 disable IRQ.  @disabled because timeout_reset initializes this to something other than zero

	str_ m6502_a,frame		@frame count reset

	@(clear irq/nmi/res source)...
	
	mov r0,#0
	bl _4017w
	
	mov r0,#0
	bl _4015w

@	mov r0,#0x40
@	strb r0,apu_4017

	ldr r12,=RES_VECTOR
	bl_long Vec6502
	sub cycles,cycles,#7*3*CYCLE
	

@	mov r11,r11
	adr_ r0,cpuregs
	stmia r0,{m6502_nz-m6502_pc}
	ldr pc,[sp],#4

 .if DEBUG
	global_func normal_fetch
	global_func debug_fetch
	.section .iwram, "ax", %progbits
normal_fetch:
	ldrplb r0,[m6502_pc],#1
	ldrpl pc,[m6502_optbl,r0,lsl#2]
	ldr_ pc,nexttimeout

	.text

debug_fetch:
	ldrmi_ pc,nexttimeout
	mov r0,#1
	strb_ r0,crash_disabled
	
	stmfd sp!,{r3}
	ldr_ r3,lastbank
	sub r3,m6502_pc,r3
	
	mov r1,m6502_x,lsr#24
	mov r2,m6502_y,lsr#24
	sub sp,sp,#32
	mov r0,sp
	
	stmfd sp!,{r0}
	blx_long disassemble
	ldr r0,[sp]
	@vbaprint disassembled code
	swi 0xFF0000
	@vbaprint newline
	ldr r0,[sp]
	ldr r1,=0x000A0D
	str r1,[r0]
	swi 0xFF0000
	
	
	ldmfd sp!,{r0}
	
	add sp,sp,#32
	ldmfd sp!,{r3}
	subs cycles,cycles,#0*CYCLE
	b_long normal_fetch
 .endif




 .section .data.100, "w", %progbits

.if PRG_BANK_SIZE == 4

_writemem_tbl_base:
_writemem_0_:
	.word ram_W	@$0000
_writemem_F:
	.word void	@$F000
_writemem_E:
	.word void	@$E000
_writemem_D:
	.word void	@$D000
_writemem_C:
	.word void	@$C000
_writemem_B:
	.word void	@$B000
_writemem_A:
	.word void	@$A000
_writemem_9:
	.word void	@$9000
_writemem_8:
	.word void	@$8000
_writemem_7:
	.word sram_W	@$7000
_writemem_6:
	.word sram_W	@$6000
_writemem_5:
	.word IO_W	@$4000
_writemem_4:
	.word IO_W	@$4000
_writemem_3:
	.word PPU_W	@$3000
_writemem_2:
	.word PPU_W	@$2000
_writemem_1:
	.word ram_W	@$1000
_writemem_tbl:
_writemem_0:
	.word ram_W	@$0000

_memmap_tbl:
   @memmap_tbl
_memmap_0:
	.word NES_RAM		@$0000   0000-7fff should never change
_memmap_1:
	.word NES_RAM		@$1000
_memmap_2:
	.word NES_RAM		@$2000    
_memmap_3:
	.word NES_RAM		@$3000    
_memmap_4:
	.word NES_RAM		@$4000     
_memmap_5:
	.word NES_RAM		@$5000     
_memmap_6:
	.word NES_RAM-0x5800	@$6000      
_memmap_7:
	.word NES_RAM-0x5800	@$7000      
rommap:
_memmap_8:
	.word 0				@$8000
_memmap_9:
	.word 0				@$9000
_memmap_A:
	.word 0				@$A000
_memmap_B:
	.word 0				@$B000
_memmap_C:
	.word 0				@$C000
_memmap_D:
	.word 0				@$D000
_memmap_E:
	.word 0				@$E000
_memmap_F:
	.word 0				@$F000

  @readmem_tbl 
_readmem_tbl_base:
_readmem_0_:
	.word ram_R	@$0000	appears twice because adding X or Y to addy may overflow
_readmem_F:
	.word rom_RF0	@$E000
_readmem_E:
	.word rom_RE0	@$E000
_readmem_D:
	.word rom_RD0	@$D000
_readmem_C:
	.word rom_RC0	@$C000
_readmem_B:
	.word rom_RB0	@$B000
_readmem_A:
	.word rom_RA0	@$A000
_readmem_9:
	.word rom_R90	@$9000
_readmem_8:
	.word rom_R80	@$8000
_readmem_7:
	.word sram_R	@$7000
_readmem_6:
	.word sram_R	@$6000
_readmem_5:
	.word IO_R	@$5000
_readmem_4:
	.word IO_R	@$4000
_readmem_3:
	.word PPU_R	@$3000
_readmem_2:
	.word PPU_R	@$2000
_readmem_1:
	.word ram_R	@$1000
_readmem_tbl:
_readmem_0:
	.word ram_R	@$0000

.endif

.if PRG_BANK_SIZE == 8

_writemem_tbl_base:
_writemem_0_:
	.word ram_W	@$0000
_writemem_E:
	.word void	@$E000
_writemem_C:
	.word void	@$C000
_writemem_A:
	.word void	@$A000
_writemem_8:
	.word void	@$8000
_writemem_6:
	.word sram_W	@$6000
_writemem_4:
	.word IO_W	@$4000
_writemem_2:
	.word PPU_W	@$2000
_writemem_tbl:
_writemem_0:
	.word ram_W	@$0000

_memmap_tbl:
   @memmap_tbl
_memmap_0:
	.word NES_RAM		@$0000   0000-7fff
_memmap_2:
	.word NES_RAM		@$2000    should
_memmap_4:
	.word NES_RAM		@$4000     never
_memmap_6:
	.word NES_RAM-0x5800	@$6000      change
rommap:
_memmap_8:
	.word 0				@$8000
_memmap_A:
	.word 0				@$A000
_memmap_C:
	.word 0				@$C000
_memmap_E:
	.word 0				@$E000

  @readmem_tbl 
_readmem_tbl_base:
_readmem_0_:
	.word ram_R	@$0000	appears twice because adding X or Y to addy may overflow
_readmem_E:
	.word rom_RE0	@$E000
_readmem_C:
	.word rom_RC0	@$C000
_readmem_A:
	.word rom_RA0	@$A000
_readmem_8:
	.word rom_R80	@$8000
_readmem_6:
	.word sram_R	@$6000
_readmem_4:
	.word IO_R	@$4000
_readmem_2:
	.word PPU_R	@$2000
_readmem_tbl:
_readmem_0:
	.word ram_R	@$0000

.endif

	.global _readmem_tbl_base
	.global _readmem_tbl

GLOBAL_PTR_BASE:
op_table:
	.word _00,_01,_xx,_xx,_x3,_05,_06,_07,_08,_09,_0A,_xx,_x5,_0D,_0E,_0F
	.word _10,_11,_xx,_xx,_x4,_15,_16,_17,_18,_19,_EA,_1B,_xC,_1D,_1E,_1F
	.word _20,_21,_xx,_xx,_24,_25,_26,_xx,_28,_29,_2A,_xx,_2C,_2D,_2E,_xx
	.word _30,_31,_xx,_xx,_x4,_35,_36,_xx,_38,_39,_EA,_xx,_xC,_3D,_3E,_xx
	.word _40,_41,_xx,_xx,_x3,_45,_46,_xx,_48,_49,_4A,_xx,_4C,_4D,_4E,_xx
	.word _50,_51,_xx,_xx,_x4,_55,_56,_xx,_58,_59,_EA,_xx,_xC,_5D,_5E,_xx
	.word _60,_61,_xx,_xx,_x3,_65,_66,_xx,_68,_69,_6A,_xx,_6C,_6D,_6E,_xx
	.word _70,_71,_xx,_xx,_x4,_75,_76,_xx,_78,_79,_EA,_xx,_xC,_7D,_7E,_xx
	.word _x2,_81,_x2,_xx,_84,_85,_86,_xx,_88,_x2,_8A,_xx,_8C,_8D,_8E,_8F
	.word _90,_91,_xx,_xx,_94,_95,_96,_xx,_98,_99,_9A,_xx,_xx,_9D,_xx,_xx
	.word _A0,_A1,_A2,_xx,_A4,_A5,_A6,_xx,_A8,_A9,_AA,_xx,_AC,_AD,_AE,_xx
	.word _B0,_B1,_xx,_B3,_B4,_B5,_B6,_xx,_B8,_B9,_BA,_xx,_BC,_BD,_BE,_xx
	.word _C0,_C1,_x2,_xx,_C4,_C5,_C6,_xx,_C8,_C9,_CA,_CB,_CC,_CD,_CE,_xx
	.word _D0,_D1,_xx,_xx,_x4,_D5,_D6,_xx,_D8,_D9,_EA,_xx,_xC,_DD,_DE,_xx
	.word _E0,_E1,_x2,_xx,_E4,_E5,_E6,_xx,_E8,_E9,_EA,_E9,_EC,_ED,_EE,_xx
	.word _F0,_F1,_xx,_xx,_x4,_F5,_F6,_xx,_F8,_F9,_EA,_xx,_xC,_FD,_FE,_xx

cpustate:
	@cpuregs - group these together for save/loadstate
_cpu_nz:
	.skip 4
_cpu_readmem_tbl:
	.skip 4
_cpu_a:
	.skip 4
_cpu_x:
	.skip 4
_cpu_y:
	.skip 4
_cpu_cycles:
	.skip 4
_m6502_pc:
	.word 0 @m6502_pc
_m6502_s:
	.word 0 @m6502_s:
_wantirq:
	.byte 0 @wantirq
@3 unused bytes
	.byte 0
	.byte 0
	.byte 0

.global _wantirq

frametotal:		@let ui.c see frame count for savestates
	.word 0 @frame
@_scanline
@	.word 0 @scanline
_lastbank:
	.word 0 @lastbank: last memmap added to PC (used to calculate current PC)
_nexttimeout:
	.word 0 @nexttimeout:  jump here when cycles runs out
@	.word 0 @line_end_timeout
@	.word 0 @line_mid_timeout
@	.word 0 @scanlinehook
@	.word 0 @midlinehook
@	.word 0 @cyclesperscanline1 (256*CYCLE or 240*CYCLE)  (total is 341/320)
@	.word 0 @cyclesperscanline2 (85*CYCLE or 80*CYCLE)
@	.word 0 @lastscanline (261 or 311)


@----------------------------------------------------------------------------
	@.end
