 .section .iwram.0, "ax", %progbits

@	#include "equates.h"
@	#include "gbz80mac.h"
@	#include "cart.h"
@	#include "memory.h"
@	#include "io.h"
@	#include "lcd.h"
@	#include "sound.h"
@	#include "sgb.h"

@	IMPORT |wram_globals0$$Base|
	@IMPORT ui	@ui.c
	@IMPORT quickload	@sram.c
	@IMPORT quicksave	@sram.c

	.global GLOBAL_PTR_BASE

	.global dontstop
	
	.global immediate_check_irq
	
	.global CHR_DECODE
	.global XGB_RAM
	.global XGB_HRAM
 .if RESIZABLE
 .else
	.global XGB_VRAM
	.global GBC_EXRAM
 .endif
	global_func update_doublespeed_ui
	
	global_func emu_reset
	global_func run
	.global op_table
	global_func default_scanlinehook
	.global cpustate
	.global rommap
	.global g_memmap_tbl
	.global frametotal
	.global sleeptime
	.global novblankwait
	global_func request_gba_mode
	global_func request_gb_type
	global_func line145_to_end
	global_func checkIRQ
	global_func _00
	.global gbc_mode
	
	.global g_hackflags
	.global doubletimer
	
	.global g_readmem_tbl
	.global g_writemem_tbl

	.if RESIZABLE
	.global XGB_sram
	.global XGB_sramsize
	.global XGB_vram
	.global XGB_vramsize
	.global GBC_exram
	.global GBC_exramsize
	.global END_of_exram
	.global XGB_vram_1800
	.global XGB_vram_1C00
	.endif

	.if MOVIEPLAYER
	.ascii "WRAM"
	.endif

#if SPEEDHACKS_NEW
	global_func install_speedhack
	global_func speedhack_reset
	.global _speedhack_pc
	.global _quickhackused
	.global _quickhackcounter
#endif

@----------------------------------------------------------------------------
_GO:@	Continue running
@----------------------------------------------------------------------------
	fetch 0

@----------------------------------------------------------------------------
_ED:@	DEBUG					;actually invalid opcode
@----------------------------------------------------------------------------
@	mov r0,#1
@	strb r0,debugstop
debugwait:
@	ldrb r0,debugstop
@	cmp r0,#0
@	bne debugwait
@	fetch 0

@_XX
@	ldr r0,lastbank
@	sub gb_pc,gb_pc,r0
@	sub gb_pc,gb_pc,#1
@	encodePC
@	b _GO

@----------------------------------------------------------------------------
_xx:@	???					;invalid opcode
@----------------------------------------------------------------------------
	.if DEBUG
		adr r0,_xx
		mov r1,#0
		bl debug_
		fetch 4
	.endif
@----------------------------------------------------------------------------
_40:@	LD B,B
_49:@	LD C,C
_52:@	LD D,D
_5B:@	LD E,E
_64:@	LD H,H
_6D:@	LD L,L
_7F:@	LD A,A
@----------------------------------------------------------------------------
_00:@   NOP
@----------------------------------------------------------------------------
	fetch 4
@----------------------------------------------------------------------------
_01:@	LD BC,#nnnn
@----------------------------------------------------------------------------
	opLDIM16
	mov gb_bc,r0,lsl#16
	fetch 16
@----------------------------------------------------------------------------
_02:@	LD (BC),A	write A to (BC)
@----------------------------------------------------------------------------
	mov r0,gb_a,lsr#24
	mov addy,gb_bc,lsr#16
	writemem
	fetch 8
@----------------------------------------------------------------------------
_03:@	INC BC
@----------------------------------------------------------------------------
	opINC16 gb_bc
	fetch 8
@----------------------------------------------------------------------------
_04:@	INC B
@----------------------------------------------------------------------------
	opINC8H gb_bc
@----------------------------------------------------------------------------
_05:@	DEC B
@----------------------------------------------------------------------------
	opDEC8H gb_bc
@----------------------------------------------------------------------------
_06:@	LD B,#nn
@----------------------------------------------------------------------------
	opLDIM8H gb_bc
@----------------------------------------------------------------------------
_07:@	RLCA	rotate accu left
@----------------------------------------------------------------------------
	mov gb_flg,#0
	adds gb_a,gb_a,gb_a
	orrcs gb_flg,gb_flg,#PSR_C
	orrcs gb_a,gb_a,#0x01000000
	fetch 4
@----------------------------------------------------------------------------
_08:@	LD (nnnn),SP	write SP to (nnnn)
@----------------------------------------------------------------------------
	ldrb addy,[gb_pc],#1
	ldrb r0,[gb_pc],#1
	orr addy,addy,r0,lsl#8
	mov r0,gb_sp,lsr#16
	writemem
	add addy,addy,#1		@Might be changed!!!
	mov r0,gb_sp,lsr#24
	writemem
	fetch 20
@----------------------------------------------------------------------------
_09:@	ADD HL,BC
@----------------------------------------------------------------------------
	opADD16 gb_bc
@----------------------------------------------------------------------------
_0A:@	LD A,(BC)
@----------------------------------------------------------------------------
	mov addy,gb_bc,lsr#16
	readmem
	mov gb_a,r0,lsl#24
	fetch 8
@----------------------------------------------------------------------------
_0B:@	DEC BC
@----------------------------------------------------------------------------
	opDEC16 gb_bc
	fetch 8
@----------------------------------------------------------------------------
_0C:@	INC C
@----------------------------------------------------------------------------
	opINC8L gb_bc
@----------------------------------------------------------------------------
_0D:@	DEC C
@----------------------------------------------------------------------------
	opDEC8L gb_bc
@----------------------------------------------------------------------------
_0E:@	LD C,#nn
@----------------------------------------------------------------------------
	opLDIM8L gb_bc
@----------------------------------------------------------------------------
_0F:@	RRCA	rotate accu right
@----------------------------------------------------------------------------
	mov gb_flg,#0
	movs gb_a,gb_a,lsr#25
	orrcs gb_flg,gb_flg,#PSR_C
	orrcs gb_a,gb_a,#0x00000080
	mov gb_a,gb_a,lsl#24
	fetch 4
	.ltorg
@----------------------------------------------------------------------------
_11:@	LD DE,#nnnn
@----------------------------------------------------------------------------
	opLDIM16
	mov gb_de,r0,lsl#16
	fetch 16
@----------------------------------------------------------------------------
_12:@	LD (DE),A	write A to (DE)
@----------------------------------------------------------------------------
	mov r0,gb_a,lsr#24
	mov addy,gb_de,lsr#16
	writemem
	fetch 8
@----------------------------------------------------------------------------
_13:@	INC DE
@----------------------------------------------------------------------------
	opINC16 gb_de
	fetch 8
@----------------------------------------------------------------------------
_14:@	INC D
@----------------------------------------------------------------------------
	opINC8H gb_de
@----------------------------------------------------------------------------
_15:@	DEC D
@----------------------------------------------------------------------------
	opDEC8H gb_de
@----------------------------------------------------------------------------
_16:@	LD D,#nn
@----------------------------------------------------------------------------
	opLDIM8H gb_de
@----------------------------------------------------------------------------
_17:@	RLA	rotate accu left through C
@----------------------------------------------------------------------------
	tst gb_flg,#PSR_C
	mov gb_flg,#0			@clear flags
	orrne gb_a,gb_a,#0x00800000
	adds gb_a,gb_a,gb_a
	orrcs gb_flg,gb_flg,#PSR_C
	fetch 4
@----------------------------------------------------------------------------
_18:@	JR *	relative jump
@----------------------------------------------------------------------------
	ldrsb r0,[gb_pc],#1
	add gb_pc,gb_pc,r0
	fetch 8
#if SPEEDHACKS_NEW
@----------------------------------------------------------------------------
_18x:@	JR *	relative jump
@----------------------------------------------------------------------------
	ldrsb r0,[gb_pc],#1
	add gb_pc,gb_pc,r0
_18x_modify:
	cmp r0,#-4
	bleq speedhack_check
fetch8:
	fetch 8
#endif
@----------------------------------------------------------------------------
_19:@	ADD HL,DE
@----------------------------------------------------------------------------
	opADD16 gb_de
@----------------------------------------------------------------------------
_1A:@	LD A,(DE)
@----------------------------------------------------------------------------
	mov addy,gb_de,lsr#16
	readmem
	mov gb_a,r0,lsl#24
	fetch 8
@----------------------------------------------------------------------------
_1B:@	DEC DE
@----------------------------------------------------------------------------
	opDEC16 gb_de
	fetch 8
@----------------------------------------------------------------------------
_1C:@	INC E
@----------------------------------------------------------------------------
	opINC8L gb_de
@----------------------------------------------------------------------------
_1D:@	DEC E
@----------------------------------------------------------------------------
	opDEC8L gb_de
@----------------------------------------------------------------------------
_1E:@	LD E,#nn
@----------------------------------------------------------------------------
	opLDIM8L gb_de
@----------------------------------------------------------------------------
_1F:@	RRA	rotate accu right through C
@----------------------------------------------------------------------------
	msr cpsr_f,gb_flg	@get C
	mov gb_flg,#0		@clear flags
	mov gb_a,gb_a,rrx
	tst gb_a,#0x00800000
	orrne gb_flg,gb_flg,#PSR_C
	bic gb_a,gb_a,#0x00800000
	fetch 4

@----------------------------------------------------------------------------
_20:@	JR NZ,*	jump if not zero
@----------------------------------------------------------------------------
	tst gb_flg,#PSR_Z
	ldrsb r0,[gb_pc],#1
	addeq gb_pc,gb_pc,r0
	subeq cycles,cycles,#4*CYCLE
nobranch:
	fetch 8
#if SPEEDHACKS_NEW
@----------------------------------------------------------------------------
_20x:@	JR NZ,*	jump if not zero - speedhack version
@----------------------------------------------------------------------------
	tst gb_flg,#PSR_Z
	ldrsb r0,[gb_pc],#1
	bne nobranch
	add gb_pc,gb_pc,r0
_20x_modify:
	cmp r0,#-4
	bleq speedhack_check
fetch12:
	fetch 12
speedhack_check:
	ldr_ r1,speedhack_pc
	cmp gb_pc,r1
	beq speedhack_apply
speedhack_modify:
	bx lr
	@second chance using RAM address (for games that have lots of scattered polling loops)
	ldrb r2,[r9,#0]
	cmp r2,#0xFA	@ld a,(nnnn)
	bxne lr
	ldrb r1,[r9,#1]
	ldrb r2,[r9,#2]
	orr r1,r1,r2,lsl#8
	ldrh_ r12,speedhack_ram_address
	cmp r1,r12
	bxne lr
speedhack_apply:
	and cycles,cycles,#CYC_MASK
	mov r1,#1
	strb_ r1,quickhackused
	bx lr

#endif


@----------------------------------------------------------------------------
_21:@	LD HL,#nnnn
@----------------------------------------------------------------------------
	opLDIM16
	mov gb_hl,r0,lsl#16
	fetch 16
@----------------------------------------------------------------------------
_22:@	LDI (HL),A	write A to (HL), incr HL
@----------------------------------------------------------------------------
	mov r0,gb_a,lsr#24
	writememHL
	add gb_hl,gb_hl,#0x00010000
	fetch 8
@----------------------------------------------------------------------------
_23:@	INC HL
@----------------------------------------------------------------------------
	opINC16 gb_hl
	fetch 8
@----------------------------------------------------------------------------
_24:@	INC H
@----------------------------------------------------------------------------
	opINC8H gb_hl
@----------------------------------------------------------------------------
_25:@	DEC H
@----------------------------------------------------------------------------
	opDEC8H gb_hl
@----------------------------------------------------------------------------
_26:@	LD H,#nn
@----------------------------------------------------------------------------
	opLDIM8H gb_hl
@----------------------------------------------------------------------------
_28:@	JR Z,*	jump if zero
@----------------------------------------------------------------------------
	tst gb_flg,#PSR_Z
	ldrsb r0,[gb_pc],#1
@	beq _28_
	addne gb_pc,gb_pc,r0
	subne cycles,cycles,#4*CYCLE
@	cmp r0,#-4
@	andeq cycles,cycles,#CYC_MASK
_28_:
	fetch 8

#if SPEEDHACKS_NEW
@----------------------------------------------------------------------------
_28x:@	JR Z,*	jump if zero - speedhack version
@----------------------------------------------------------------------------
	tst gb_flg,#PSR_Z
	ldrsb r0,[gb_pc],#1
	beq nobranch
	add gb_pc,gb_pc,r0
_28x_modify:
	cmp r0,#-4
	bleq speedhack_check
	fetch 12
#endif


@----------------------------------------------------------------------------
_29:@	ADD HL,HL
@----------------------------------------------------------------------------
	opADD16_2


#if FAST_LDI_A_HL
@----------------------------------------------------------------------------
_2Ax:@	LDI A,(HL)	load A from (HL), incr HL
@----------------------------------------------------------------------------
@new code: remember the last page it read from, so it can run faster for the next read
	mov r1,gb_hl,lsr#28
_2Ax_:
	ldr r1,[pc,r1,lsl#2]
	b 0f
	.word _2A_page0
	.word _2A_page0
	.word _2A_page0
	.word _2A_page0
	.word _2A_page4
	.word _2A_page4
	.word _2A_page4
	.word _2A_page4
	.word _2A_page8
	.word _2A_page8
	.word _2A_pageA
	.word _2A_pageA
	.word _2A_pageC
	.word _2A_pageD
	.word _2A_pageEF
	.word _2A_pageEF
0:
	str r1,[r10,#0x2A*4]
	bx r1

_2A_pageEF:
	cmp gb_hl,#0xE0000000
	blo _2Ax
_2A:
	readmemHL
	add gb_hl,gb_hl,#0x00010000
	mov gb_a,r0,lsl#24
	fetch 8

_2A_pageC:
	mov r1,gb_hl,lsr#28
	cmp r1,#0x0C
	bne _2Ax_
_2A_pageC_:
	ldr_ r1,memmap_tbl+0x0C*4
	ldrb r0,[r1,gb_hl,lsr#16]
	mov gb_a,r0,lsl#24
	add gb_hl,gb_hl,#0x10000
	fetch 8

_2A_pageD:
	mov r1,gb_hl,lsr#28
	cmp r1,#0x0D
	bne _2Ax_
_2A_pageD_:
	ldr_ r1,memmap_tbl+0x0D*4
	ldrb r0,[r1,gb_hl,lsr#16]
	mov gb_a,r0,lsl#24
	add gb_hl,gb_hl,#0x10000
	fetch 8

_2A_page0:
	cmp gb_hl,#0x40000000
	bcs _2Ax
_2A_page0_:
	ldr_ r1,memmap_tbl+0x00*4
	ldrb r0,[r1,gb_hl,lsr#16]
	mov gb_a,r0,lsl#24
	add gb_hl,gb_hl,#0x10000
	fetch 8

_2A_page4:
	mov r1,gb_hl,lsr#30
	cmp r1,#0x01
	bne _2Ax
_2A_page4_:
	ldr_ r1,memmap_tbl+0x04*4
	ldrb r0,[r1,gb_hl,lsr#16]
	mov gb_a,r0,lsl#24
	add gb_hl,gb_hl,#0x10000
	fetch 8

_2A_page8:
	mov r1,gb_hl,lsr#29
	cmp r1,#0x04
	bne _2Ax
_2A_page8_:
	ldr_ r1,memmap_tbl+0x08*4
	ldrb r0,[r1,gb_hl,lsr#16]
	mov gb_a,r0,lsl#24
	add gb_hl,gb_hl,#0x10000
	fetch 8

_2A_pageA:
	mov r1,gb_hl,lsr#29
	cmp r1,#0x05
	bne _2Ax
_2A_pageA_:
	ldr_ r1,memmap_tbl+0x0A*4
	ldrb r0,[r1,gb_hl,lsr#16]
	mov gb_a,r0,lsl#24
	add gb_hl,gb_hl,#0x10000
	fetch 8
#else
_2Ax:
@----------------------------------------------------------------------------
_2A:@	LDI A,(HL)	load A from (HL), incr HL
@----------------------------------------------------------------------------
	readmemHL
	add gb_hl,gb_hl,#0x00010000
	mov gb_a,r0,lsl#24
	fetch 8
#endif

@----------------------------------------------------------------------------
_2B:@	DEC HL
@----------------------------------------------------------------------------
	opDEC16 gb_hl
	fetch 8
@----------------------------------------------------------------------------
_2C:@	INC L
@----------------------------------------------------------------------------
	opINC8L gb_hl
@----------------------------------------------------------------------------
_2D:@	DEC L
@----------------------------------------------------------------------------
	opDEC8L gb_hl
@----------------------------------------------------------------------------
_2E:@	LD L,#nn
@----------------------------------------------------------------------------
	opLDIM8L gb_hl
@----------------------------------------------------------------------------
_2F:@	CPL	complement A
@----------------------------------------------------------------------------
	eor gb_a,gb_a,#0xFF000000
	orr gb_flg,gb_flg,#PSR_n|PSR_h		@set n & h
	fetch 4
@----------------------------------------------------------------------------
_30:@	JR NC,*	jump if no carry
@----------------------------------------------------------------------------
	tst gb_flg,#PSR_C
	ldrsb r0,[gb_pc],#1
	addeq gb_pc,gb_pc,r0
	subeq cycles,cycles,#4*CYCLE
	fetch 8
#if SPEEDHACKS_NEW
@----------------------------------------------------------------------------
_30x:@	JR NC,*	jump if no carry - speedhack version
@----------------------------------------------------------------------------
	tst gb_flg,#PSR_C
	ldrsb r0,[gb_pc],#1
	bne nobranch
	add gb_pc,gb_pc,r0
_30x_modify:
	cmp r0,#-4
	bleq speedhack_check
	fetch 12
#endif


@----------------------------------------------------------------------------
_31:@	LD SP,#nnnn
@----------------------------------------------------------------------------
	opLDIM16
	mov gb_sp,r0,lsl#16
	fetch 16
@----------------------------------------------------------------------------
_32:@	LDD (HL),A	write A to (HL), decr HL
@----------------------------------------------------------------------------
	mov r0,gb_a,lsr#24
	writememHL
	sub gb_hl,gb_hl,#0x00010000
	fetch 8
@----------------------------------------------------------------------------
_33:@	INC SP
@----------------------------------------------------------------------------
	opINC16 gb_sp
	fetch 8
@----------------------------------------------------------------------------
_34:@	INC (HL)
@----------------------------------------------------------------------------
	readmemHL
	opINC8b
	writemem
	fetch 12
@----------------------------------------------------------------------------
_35:@	DEC (HL)
@----------------------------------------------------------------------------
	readmemHL
	opDEC8b
	writemem
	fetch 12
@----------------------------------------------------------------------------
_36:@	LD (HL),#nn
@----------------------------------------------------------------------------
	ldrb r0,[gb_pc],#1
	writememHL
	fetch 12
@----------------------------------------------------------------------------
_37:@	SCF	set carry flag
@----------------------------------------------------------------------------
	and gb_flg,gb_flg,#PSR_Z	@clear n & h, keep zero
	orr gb_flg,gb_flg,#PSR_C	@set carry.
	fetch 4
@----------------------------------------------------------------------------
_38:@	JR C,*	jump if carry
@----------------------------------------------------------------------------
	tst gb_flg,#PSR_C
	ldrsb r0,[gb_pc],#1
	addne gb_pc,gb_pc,r0
	subne cycles,cycles,#4*CYCLE
	fetch 8
#if SPEEDHACKS_NEW
@----------------------------------------------------------------------------
_38x:@	JR C,*	jump if carry - speedhack version
@----------------------------------------------------------------------------
	tst gb_flg,#PSR_C
	ldrsb r0,[gb_pc],#1
	beq nobranch
	add gb_pc,gb_pc,r0
_38x_modify:
	cmp r0,#-4
	bleq speedhack_check
	fetch 12
#endif


@----------------------------------------------------------------------------
_39:@	ADD HL,SP
@----------------------------------------------------------------------------
	opADD16 gb_sp
@----------------------------------------------------------------------------
_3A:@	LDD A,(HL)	load A from (HL), decr HL
@----------------------------------------------------------------------------
	readmemHL
	sub gb_hl,gb_hl,#0x00010000
	mov gb_a,r0,lsl#24
	fetch 8
@----------------------------------------------------------------------------
_3C:@	INC A
@----------------------------------------------------------------------------
	opINC8A
@----------------------------------------------------------------------------
_3D:@	DEC A
@----------------------------------------------------------------------------
	opDEC8A
@----------------------------------------------------------------------------
_3E:@	LD A,#nn
@----------------------------------------------------------------------------
	ldrb r0,[gb_pc],#1
	mov gb_a,r0,lsl#24
	fetch 8
@----------------------------------------------------------------------------
_3F:@	CCF	complement carry flag
@----------------------------------------------------------------------------
	and gb_flg,gb_flg,#PSR_Z|PSR_C	@clear n & h, keep zero & carry.
	eor gb_flg,gb_flg,#PSR_C	@complement carry.
	fetch 4
@----------------------------------------------------------------------------
@_40;	LD B,B
@----------------------------------------------------------------------------
@	fetch 4
@----------------------------------------------------------------------------
_41:@	LD B,C
@----------------------------------------------------------------------------
	and gb_bc,gb_bc,#0x00FF0000
	orr gb_bc,gb_bc,gb_bc,lsl#8
	fetch 4
@----------------------------------------------------------------------------
_42:@	LD B,D
@----------------------------------------------------------------------------
	and gb_bc,gb_bc,#0x00FF0000
	and r0,gb_de,#0xFF000000
	orr gb_bc,gb_bc,r0
	fetch 4
@----------------------------------------------------------------------------
_43:@	LD B,E
@----------------------------------------------------------------------------
	and gb_bc,gb_bc,#0x00FF0000
	orr gb_bc,gb_bc,gb_de,lsl#8
	fetch 4
@----------------------------------------------------------------------------
_44:@	LD B,H
@----------------------------------------------------------------------------
	and gb_bc,gb_bc,#0x00FF0000
	and r0,gb_hl,#0xFF000000
	orr gb_bc,gb_bc,r0
	fetch 4
@----------------------------------------------------------------------------
_45:@	LD B,L
@----------------------------------------------------------------------------
	and gb_bc,gb_bc,#0x00FF0000
	orr gb_bc,gb_bc,gb_hl,lsl#8
	fetch 4
@----------------------------------------------------------------------------
_46:@	LD B,(HL)
@----------------------------------------------------------------------------
	readmemHL
	and gb_bc,gb_bc,#0x00FF0000
	orr gb_bc,gb_bc,r0,lsl#24
	fetch 8
@----------------------------------------------------------------------------
_47:@	LD B,A
@----------------------------------------------------------------------------
	and gb_bc,gb_bc,#0x00FF0000
	orr gb_bc,gb_bc,gb_a
	fetch 4
@----------------------------------------------------------------------------
_48:@	LD C,B
@----------------------------------------------------------------------------
	and gb_bc,gb_bc,#0xFF000000
	orr gb_bc,gb_bc,gb_bc,lsr#8
	fetch 4
@----------------------------------------------------------------------------
@_49;	LD C,C
@----------------------------------------------------------------------------
@	fetch 4
@----------------------------------------------------------------------------
_4A:@	LD C,D
@----------------------------------------------------------------------------
	and gb_bc,gb_bc,#0xFF000000
	orr gb_bc,gb_bc,gb_de,lsr#8
	bic gb_bc,gb_bc,#0x0000FF00
	fetch 4
@----------------------------------------------------------------------------
_4B:@	LD C,E
@----------------------------------------------------------------------------
	and gb_bc,gb_bc,#0xFF000000
	and r0,gb_de,#0x00FF0000
	orr gb_bc,gb_bc,r0
	fetch 4
@----------------------------------------------------------------------------
_4C:@	LD C,H
@----------------------------------------------------------------------------
	and gb_bc,gb_bc,#0xFF000000
	orr gb_bc,gb_bc,gb_hl,lsr#8
	bic gb_bc,gb_bc,#0x0000FF00
	fetch 4
@----------------------------------------------------------------------------
_4D:@	LD C,L
@----------------------------------------------------------------------------
	and gb_bc,gb_bc,#0xFF000000
	and r0,gb_hl,#0x00FF0000
	orr gb_bc,gb_bc,r0
	fetch 4
@----------------------------------------------------------------------------
_4E:@	LD C,(HL)
@----------------------------------------------------------------------------
	readmemHL
	and gb_bc,gb_bc,#0xFF000000
	orr gb_bc,gb_bc,r0,lsl#16
	fetch 8
@----------------------------------------------------------------------------
_4F:@	LD C,A
@----------------------------------------------------------------------------
	and gb_bc,gb_bc,#0xFF000000
	orr gb_bc,gb_bc,gb_a,lsr#8
	fetch 4
@----------------------------------------------------------------------------
_50:@	LD D,B
@----------------------------------------------------------------------------
	and gb_de,gb_de,#0x00FF0000
	and r0,gb_bc,#0xFF000000
	orr gb_de,gb_de,r0
	fetch 4
@----------------------------------------------------------------------------
_51:@	LD D,C
@----------------------------------------------------------------------------
	and gb_de,gb_de,#0x00FF0000
	orr gb_de,gb_de,gb_bc,lsl#8
	fetch 4
@----------------------------------------------------------------------------
@_52;	LD D,D
@----------------------------------------------------------------------------
@	fetch 4
@----------------------------------------------------------------------------
_53:@	LD D,E
@----------------------------------------------------------------------------
	and gb_de,gb_de,#0x00FF0000
	orr gb_de,gb_de,gb_de,lsl#8
	fetch 4
@----------------------------------------------------------------------------
_54:@	LD D,H
@----------------------------------------------------------------------------
	and gb_de,gb_de,#0x00FF0000
	and r0,gb_hl,#0xFF000000
	orr gb_de,gb_de,r0
	fetch 4
@----------------------------------------------------------------------------
_55:@	LD D,L
@----------------------------------------------------------------------------
	and gb_de,gb_de,#0x00FF0000
	orr gb_de,gb_de,gb_hl,lsl#8
	fetch 4
@----------------------------------------------------------------------------
_56:@	LD D,(HL)
@----------------------------------------------------------------------------
	readmemHL
	and gb_de,gb_de,#0x00FF0000
	orr gb_de,gb_de,r0,lsl#24
	fetch 8
@----------------------------------------------------------------------------
_57:@	LD D,A
@----------------------------------------------------------------------------
	and gb_de,gb_de,#0x00FF0000
	orr gb_de,gb_de,gb_a
	fetch 4
@----------------------------------------------------------------------------
_58:@	LD E,B
@----------------------------------------------------------------------------
	and gb_de,gb_de,#0xFF000000
	orr gb_de,gb_de,gb_bc,lsr#8
	bic gb_de,gb_de,#0x0000FF00
	fetch 4
@----------------------------------------------------------------------------
_59:@	LD E,C
@----------------------------------------------------------------------------
	and gb_de,gb_de,#0xFF000000
	and r0,gb_bc,#0x00FF0000
	orr gb_de,gb_de,r0
	fetch 4
@----------------------------------------------------------------------------
_5A:@	LD E,D
@----------------------------------------------------------------------------
	and gb_de,gb_de,#0xFF000000
	orr gb_de,gb_de,gb_de,lsr#8
	fetch 4
@----------------------------------------------------------------------------
@_5B;	LD E,E
@----------------------------------------------------------------------------
@	fetch 4
@----------------------------------------------------------------------------
_5C:@	LD E,H
@----------------------------------------------------------------------------
	and gb_de,gb_de,#0xFF000000
	orr gb_de,gb_de,gb_hl,lsr#8
	bic gb_de,gb_de,#0x0000FF00
	fetch 4
@----------------------------------------------------------------------------
_5D:@	LD E,L
@----------------------------------------------------------------------------
	and gb_de,gb_de,#0xFF000000
	and r0,gb_hl,#0x00FF0000
	orr gb_de,gb_de,r0
	fetch 4
@----------------------------------------------------------------------------
_5E:@	LD E,(HL)
@----------------------------------------------------------------------------
	readmemHL
	and gb_de,gb_de,#0xFF000000
	orr gb_de,gb_de,r0,lsl#16
	fetch 8
@----------------------------------------------------------------------------
_5F:@	LD E,A
@----------------------------------------------------------------------------
	and gb_de,gb_de,#0xFF000000
	orr gb_de,gb_de,gb_a,lsr#8
	fetch 4
@----------------------------------------------------------------------------
_60:@	LD H,B
@----------------------------------------------------------------------------
	and gb_hl,gb_hl,#0x00FF0000
	and r0,gb_bc,#0xFF000000
	orr gb_hl,gb_hl,r0
	fetch 4
@----------------------------------------------------------------------------
_61:@	LD H,C
@----------------------------------------------------------------------------
	and gb_hl,gb_hl,#0x00FF0000
	orr gb_hl,gb_hl,gb_bc,lsl#8
	fetch 4
@----------------------------------------------------------------------------
_62:@	LD H,D
@----------------------------------------------------------------------------
	and gb_hl,gb_hl,#0x00FF0000
	and r0,gb_de,#0xFF000000
	orr gb_hl,gb_hl,r0
	fetch 4
@----------------------------------------------------------------------------
_63:@	LD H,E
@----------------------------------------------------------------------------
	and gb_hl,gb_hl,#0x00FF0000
	orr gb_hl,gb_hl,gb_de,lsl#8
	fetch 4
@----------------------------------------------------------------------------
@_64;	LD H,H
@----------------------------------------------------------------------------
@	fetch 4
@----------------------------------------------------------------------------
_65:@	LD H,L
@----------------------------------------------------------------------------
	and gb_hl,gb_hl,#0x00FF0000
	orr gb_hl,gb_hl,gb_hl,lsl#8
	fetch 4
@----------------------------------------------------------------------------
_66:@	LD H,(HL)
@----------------------------------------------------------------------------
	readmemHL
	and gb_hl,gb_hl,#0x00FF0000
	orr gb_hl,gb_hl,r0,lsl#24
	fetch 8
@----------------------------------------------------------------------------
_67:@	LD H,A
@----------------------------------------------------------------------------
	and gb_hl,gb_hl,#0x00FF0000
	orr gb_hl,gb_hl,gb_a
	fetch 4
@----------------------------------------------------------------------------
_68:@	LD L,B
@----------------------------------------------------------------------------
	and gb_hl,gb_hl,#0xFF000000
	orr gb_hl,gb_hl,gb_bc,lsr#8
	bic gb_hl,gb_hl,#0x0000FF00
	fetch 4
@----------------------------------------------------------------------------
_69:@	LD L,C
@----------------------------------------------------------------------------
	and gb_hl,gb_hl,#0xFF000000
	and r0,gb_bc,#0x00FF0000
	orr gb_hl,gb_hl,r0
	fetch 4
@----------------------------------------------------------------------------
_6A:@	LD L,D
@----------------------------------------------------------------------------
	and gb_hl,gb_hl,#0xFF000000
	orr gb_hl,gb_hl,gb_de,lsr#8
	bic gb_hl,gb_hl,#0x0000FF00
	fetch 4
@----------------------------------------------------------------------------
_6B:@	LD L,E
@----------------------------------------------------------------------------
	and gb_hl,gb_hl,#0xFF000000
	and r0,gb_de,#0x00FF0000
	orr gb_hl,gb_hl,r0
	fetch 4
@----------------------------------------------------------------------------
_6C:@	LD L,H
@----------------------------------------------------------------------------
	and gb_hl,gb_hl,#0xFF000000
	orr gb_hl,gb_hl,gb_hl,lsr#8
	fetch 4
@----------------------------------------------------------------------------
@_6D;	LD L,L
@----------------------------------------------------------------------------
@	fetch 4
@----------------------------------------------------------------------------
_6E:@	LD L,(HL)
@----------------------------------------------------------------------------
	readmemHL
	and gb_hl,gb_hl,#0xFF000000
	orr gb_hl,gb_hl,r0,lsl#16
	fetch 8
@----------------------------------------------------------------------------
_6F:@	LD L,A
@----------------------------------------------------------------------------
	and gb_hl,gb_hl,#0xFF000000
	orr gb_hl,gb_hl,gb_a,lsr#8
	fetch 4
@----------------------------------------------------------------------------
_70:@	LD (HL),B
@----------------------------------------------------------------------------
	mov r0,gb_bc,lsr#24
	writememHL
	fetch 8
@----------------------------------------------------------------------------
_71:@	LD (HL),C
@----------------------------------------------------------------------------
	mov r0,gb_bc,lsr#16
	and r0,r0,#0xFF
	writememHL
	fetch 8
@----------------------------------------------------------------------------
_72:@	LD (HL),D
@----------------------------------------------------------------------------
	mov r0,gb_de,lsr#24
	writememHL
	fetch 8
@----------------------------------------------------------------------------
_73:@	LD (HL),E
@----------------------------------------------------------------------------
	mov r0,gb_de,lsr#16
	and r0,r0,#0xFF
	writememHL
	fetch 8
@----------------------------------------------------------------------------
_76:@	HALT, wait for interrupt.
@----------------------------------------------------------------------------
	ldrb_ r0,gb_ie
	ldrb_ r1,gb_if
	ands r0,r0,r1
	bne _noHalt
	sub gb_pc,gb_pc,#1
	and cycles,cycles,#CYC_MASK
	@orr cycles,cycles,#CYC_HALT
	fetch 4
_noHalt:
	sub cycles,cycles,#4*CYCLE
	b checkMasterIRQ
@----------------------------------------------------------------------------
_77:@	LD (HL),A
@----------------------------------------------------------------------------
	mov r0,gb_a,lsr#24
	writememHL
	fetch 8
@----------------------------------------------------------------------------
_78:@	LD A,B
@----------------------------------------------------------------------------
	and gb_a,gb_bc,#0xFF000000
	fetch 4
@----------------------------------------------------------------------------
_79:@	LD A,C
@----------------------------------------------------------------------------
	mov gb_a,gb_bc,lsl#8
	fetch 4
@----------------------------------------------------------------------------
_7A:@	LD A,D
@----------------------------------------------------------------------------
	and gb_a,gb_de,#0xFF000000
	fetch 4
@----------------------------------------------------------------------------
_7B:@	LD A,E
@----------------------------------------------------------------------------
	mov gb_a,gb_de,lsl#8
	fetch 4
@----------------------------------------------------------------------------
_7C:@	LD A,H
@----------------------------------------------------------------------------
	and gb_a,gb_hl,#0xFF000000
	fetch 4
@----------------------------------------------------------------------------
_7D:@	LD A,L
@----------------------------------------------------------------------------
	mov gb_a,gb_hl,lsl#8
	fetch 4
@----------------------------------------------------------------------------
_7E:@	LD A,(HL)
@----------------------------------------------------------------------------
	readmemHL
	mov gb_a,r0,lsl#24
	fetch 8
@----------------------------------------------------------------------------
@_7F;	LD A,A
@----------------------------------------------------------------------------
@	fetch 4
@----------------------------------------------------------------------------
_80:@	ADD B
@----------------------------------------------------------------------------
	opADDH gb_bc
@----------------------------------------------------------------------------
_81:@	ADD C
@----------------------------------------------------------------------------
	opADDL gb_bc
@----------------------------------------------------------------------------
_82:@	ADD D
@----------------------------------------------------------------------------
	opADDH gb_de
@----------------------------------------------------------------------------
_83:@	ADD E
@----------------------------------------------------------------------------
	opADDL gb_de
@----------------------------------------------------------------------------
_84:@	ADD H
@----------------------------------------------------------------------------
	opADDH gb_hl
@----------------------------------------------------------------------------
_85:@	ADD L
@----------------------------------------------------------------------------
	opADDL gb_hl
@----------------------------------------------------------------------------
_86:@	ADD (HL)
@----------------------------------------------------------------------------
	readmemHL
	opADDb
@----------------------------------------------------------------------------
_87:@	ADD A
@----------------------------------------------------------------------------
	opADDA
@----------------------------------------------------------------------------
_88:@	ADC B
@----------------------------------------------------------------------------
	opADCH gb_bc
@----------------------------------------------------------------------------
_89:@	ADC C
@----------------------------------------------------------------------------
	opADCL gb_bc
@----------------------------------------------------------------------------
_8A:@	ADC D
@----------------------------------------------------------------------------
	opADCH gb_de
@----------------------------------------------------------------------------
_8B:@	ADC E
@----------------------------------------------------------------------------
	opADCL gb_de
@----------------------------------------------------------------------------
_8C:@	ADC H
@----------------------------------------------------------------------------
	opADCH gb_hl
@----------------------------------------------------------------------------
_8D:@	ADC L
@----------------------------------------------------------------------------
	opADCL gb_hl
@----------------------------------------------------------------------------
_8E:@	ADC (HL)
@----------------------------------------------------------------------------
	readmemHL
	opADCb
@----------------------------------------------------------------------------
_8F:@	ADC A
@----------------------------------------------------------------------------
	opADCA
@----------------------------------------------------------------------------
_90:@	SUB B
@----------------------------------------------------------------------------
	opSUBH gb_bc
@----------------------------------------------------------------------------
_91:@	SUB C
@----------------------------------------------------------------------------
	opSUBL gb_bc
@----------------------------------------------------------------------------
_92:@	SUB D
@----------------------------------------------------------------------------
	opSUBH gb_de
@----------------------------------------------------------------------------
_93:@	SUB E
@----------------------------------------------------------------------------
	opSUBL gb_de
@----------------------------------------------------------------------------
_94:@	SUB H
@----------------------------------------------------------------------------
	opSUBH gb_hl
@----------------------------------------------------------------------------
_95:@	SUB L
@----------------------------------------------------------------------------
	opSUBL gb_hl
@----------------------------------------------------------------------------
_96:@	SUB (HL)
@----------------------------------------------------------------------------
	readmemHL
	opSUBb
@----------------------------------------------------------------------------
_97:@	SUB A
@----------------------------------------------------------------------------
	opSUBA
@----------------------------------------------------------------------------
_98:@	SBC B
@----------------------------------------------------------------------------
	opSBCH gb_bc
@----------------------------------------------------------------------------
_99:@	SBC C
@----------------------------------------------------------------------------
	opSBCL gb_bc
@----------------------------------------------------------------------------
_9A:@	SBC D
@----------------------------------------------------------------------------
	opSBCH gb_de
@----------------------------------------------------------------------------
_9B:@	SBC E
@----------------------------------------------------------------------------
	opSBCL gb_de
@----------------------------------------------------------------------------
_9C:@	SBC H
@----------------------------------------------------------------------------
	opSBCH gb_hl
@----------------------------------------------------------------------------
_9D:@	SBC L
@----------------------------------------------------------------------------
	opSBCL gb_hl
@----------------------------------------------------------------------------
_9E:@	SBC (HL)
@----------------------------------------------------------------------------
	readmemHL
	opSBCb
@----------------------------------------------------------------------------
_9F:@	SBC A
@----------------------------------------------------------------------------
	opSBCA
@----------------------------------------------------------------------------
_A0:@	AND B
@----------------------------------------------------------------------------
	opANDH gb_bc
@----------------------------------------------------------------------------
_A1:@	AND C
@----------------------------------------------------------------------------
	opANDL gb_bc
@----------------------------------------------------------------------------
_A2:@	AND D
@----------------------------------------------------------------------------
	opANDH gb_de
@----------------------------------------------------------------------------
_A3:@	AND E
@----------------------------------------------------------------------------
	opANDL gb_de
@----------------------------------------------------------------------------
_A4:@	AND H
@----------------------------------------------------------------------------
	opANDH gb_hl
@----------------------------------------------------------------------------
_A5:@	AND L
@----------------------------------------------------------------------------
	opANDL gb_hl
@----------------------------------------------------------------------------
_A6:@	AND (HL)
@----------------------------------------------------------------------------
	readmemHL
	opANDb
@----------------------------------------------------------------------------
_A7:@	AND A
@----------------------------------------------------------------------------
	opANDA
@----------------------------------------------------------------------------
_A8:@	XOR B
@----------------------------------------------------------------------------
	opXORH gb_bc
@----------------------------------------------------------------------------
_A9:@	XOR C
@----------------------------------------------------------------------------
	opXORL gb_bc
@----------------------------------------------------------------------------
_AA:@	XOR D
@----------------------------------------------------------------------------
	opXORH gb_de
@----------------------------------------------------------------------------
_AB:@	XOR E
@----------------------------------------------------------------------------
	opXORL gb_de
@----------------------------------------------------------------------------
_AC:@	XOR H
@----------------------------------------------------------------------------
	opXORH gb_hl
@----------------------------------------------------------------------------
_AD:@	XOR L
@----------------------------------------------------------------------------
	opXORL gb_hl
@----------------------------------------------------------------------------
_AE:@	XOR (HL)
@----------------------------------------------------------------------------
	readmemHL
	opXORb
@----------------------------------------------------------------------------
_AF:@	XOR A
@----------------------------------------------------------------------------
	opXORA
@----------------------------------------------------------------------------
_B0:@	OR B
@----------------------------------------------------------------------------
	opORH gb_bc
@----------------------------------------------------------------------------
_B1:@	OR C
@----------------------------------------------------------------------------
	opORL gb_bc
@----------------------------------------------------------------------------
_B2:@	OR D
@----------------------------------------------------------------------------
	opORH gb_de
@----------------------------------------------------------------------------
_B3:@	OR E
@----------------------------------------------------------------------------
	opORL gb_de
@----------------------------------------------------------------------------
_B4:@	OR H
@----------------------------------------------------------------------------
	opORH gb_hl
@----------------------------------------------------------------------------
_B5:@	OR L
@----------------------------------------------------------------------------
	opORL gb_hl
@----------------------------------------------------------------------------
_B6:@	OR (HL)
@----------------------------------------------------------------------------
	readmemHL
	opORb
@----------------------------------------------------------------------------
_B7:@	OR A
@----------------------------------------------------------------------------
	opORA
@----------------------------------------------------------------------------
_B8:@	CP B
@----------------------------------------------------------------------------
	opCPH gb_bc
@----------------------------------------------------------------------------
_B9:@	CP C
@----------------------------------------------------------------------------
	opCPL gb_bc
@----------------------------------------------------------------------------
_BA:@	CP D
@----------------------------------------------------------------------------
	opCPH gb_de
@----------------------------------------------------------------------------
_BB:@	CP E
@----------------------------------------------------------------------------
	opCPL gb_de
@----------------------------------------------------------------------------
_BC:@	CP H
@----------------------------------------------------------------------------
	opCPH gb_hl
@----------------------------------------------------------------------------
_BD:@	CP L
@----------------------------------------------------------------------------
	opCPL gb_hl
@----------------------------------------------------------------------------
_BE:@	CP (HL)
@----------------------------------------------------------------------------
	readmemHL
	opCPb
@----------------------------------------------------------------------------
_C0:@	RET NZ
@----------------------------------------------------------------------------
	tst gb_flg,#PSR_Z
	beq _C9_
	fetch 8
@----------------------------------------------------------------------------
_C1:@	POP BC
@----------------------------------------------------------------------------
	pop16 gb_bc
	mov gb_bc,gb_bc,lsl#16
	fetch 12
@----------------------------------------------------------------------------
_C2:@	JP NZ,$nnnn
@----------------------------------------------------------------------------
	tst gb_flg,#PSR_Z
	beq _C3
nojump:
	add gb_pc,gb_pc,#2
	fetch 12
#if SPEEDHACKS_NEW
@----------------------------------------------------------------------------
_C2x:@	JP NZ,$nnnn
@----------------------------------------------------------------------------
	tst gb_flg,#PSR_Z
	bne nojump
	b _C3x
#endif
#if SPEEDHACKS_NEW
@----------------------------------------------------------------------------
_C3x:@	JP $nnnn
@----------------------------------------------------------------------------
	ldr_ r1,speedhack_pc
	cmp gb_pc,r1
	bleq speedhack_3
#endif
@----------------------------------------------------------------------------
_C3:@	JP $nnnn
@----------------------------------------------------------------------------
	ldrb r0,[gb_pc],#1
	ldrb r1,[gb_pc]
	orr gb_pc,r0,r1,lsl#8
	encodePC
	fetch 16
#if SPEEDHACKS_NEW
speedhack_3:
	and cycles,cycles,#CYC_MASK
	mov r1,#1
	strb_ r1,quickhackused
	bx lr
#endif

@----------------------------------------------------------------------------
_C4:@	CALL NZ,$nnnn
@----------------------------------------------------------------------------
	tst gb_flg,#PSR_Z
	beq _CD
	add gb_pc,gb_pc,#2
	fetch 12
@----------------------------------------------------------------------------
_C5:@	PUSH BC
@----------------------------------------------------------------------------
	mov r0,gb_bc,lsr#16
	push16
	fetch 16
@----------------------------------------------------------------------------
_C6:@	ADD #nn
@----------------------------------------------------------------------------
	ldrb r0,[gb_pc],#1
	opADDb
@----------------------------------------------------------------------------
_C7:@	RST 0x00
_CF:@	RST 0x08
_D7:@	RST 0x10
_DF:@	RST 0x18
_E7:@	RST 0x20
_EF:@	RST 0x28
_F7:@	RST 0x30
_FF:@	RST 0x38
@----------------------------------------------------------------------------
	and r1,r0,#0x38
	ldr_ r0,lastbank
	sub r0,gb_pc,r0
	mov gb_pc,r1
	push16_novram
	encodePC_afterpush16
	fetch 16
@----------------------------------------------------------------------------
_C8:@	RET Z
@----------------------------------------------------------------------------
	tst gb_flg,#PSR_Z
	bne _C9_
	fetch 8
@----------------------------------------------------------------------------
_C9_:@
	sub cycles,cycles,#4*CYCLE
@----------------------------------------------------------------------------
_C9:@	RET
@----------------------------------------------------------------------------
	pop16 gb_pc
	encodePC
	fetch 16
@----------------------------------------------------------------------------
_CA:@	JP Z,$nnnn
@----------------------------------------------------------------------------
	tst gb_flg,#PSR_Z
	bne _C3
	add gb_pc,gb_pc,#2
	fetch 12
#if SPEEDHACKS_NEW
@----------------------------------------------------------------------------
_CAx:@	JP Z,$nnnn
@----------------------------------------------------------------------------
	tst gb_flg,#PSR_Z
	beq nojump
	b _C3x
#endif

@----------------------------------------------------------------------------
_CC:@	CALL Z,$nnnn
@----------------------------------------------------------------------------
	tst gb_flg,#PSR_Z
	bne _CD
	add gb_pc,gb_pc,#2
	fetch 12
@----------------------------------------------------------------------------
_CD:@	CALL $nnnn
@----------------------------------------------------------------------------
	ldrb r1,[gb_pc],#1
	ldrb r2,[gb_pc],#1
	ldr_ r0,lastbank
	sub r0,gb_pc,r0
	orr gb_pc,r1,r2,lsl#8
	push16_novram
	encodePC_afterpush16
	fetch 24
@----------------------------------------------------------------------------
_CE:@	ADC #nn
@----------------------------------------------------------------------------
	ldrb r0,[gb_pc],#1
	opADCb
@----------------------------------------------------------------------------
_D0:@	RET NC
@----------------------------------------------------------------------------
	tst gb_flg,#PSR_C
	beq _C9_
	fetch 8
@----------------------------------------------------------------------------
_D1:@	POP DE
@----------------------------------------------------------------------------
	pop16 gb_de
	mov gb_de,gb_de,lsl#16
	fetch 12
@----------------------------------------------------------------------------
_D2:@	JP NC,$nnnn
@----------------------------------------------------------------------------
	tst gb_flg,#PSR_C
	beq _C3
	add gb_pc,gb_pc,#2
	fetch 12
#if SPEEDHACKS_NEW
@----------------------------------------------------------------------------
_D2x:@	JP NC,$nnnn
@----------------------------------------------------------------------------
	tst gb_flg,#PSR_C
	bne nojump
	b _C3x
#endif
@----------------------------------------------------------------------------
_D4:@	CALL NC,$nnnn
@----------------------------------------------------------------------------
	tst gb_flg,#PSR_C
	beq _CD
	add gb_pc,gb_pc,#2
	fetch 12
@----------------------------------------------------------------------------
_D5:@	PUSH DE
@----------------------------------------------------------------------------
	mov r0,gb_de,lsr#16
	push16
	fetch 16
@----------------------------------------------------------------------------
_D6:@	SUB #nn
@----------------------------------------------------------------------------
	ldrb r0,[gb_pc],#1
	opSUBb
@----------------------------------------------------------------------------
_D8:@	RET C
@----------------------------------------------------------------------------
	tst gb_flg,#PSR_C
	bne _C9_
	fetch 8
@----------------------------------------------------------------------------
@_D9;	RETI		move to _FB
@----------------------------------------------------------------------------
@----------------------------------------------------------------------------
_DA:@	JP C,$nnnn
@----------------------------------------------------------------------------
	tst gb_flg,#PSR_C
	bne _C3
	add gb_pc,gb_pc,#2
	fetch 12
#if SPEEDHACKS_NEW
@----------------------------------------------------------------------------
_DAx:@	JP C,$nnnn
@----------------------------------------------------------------------------
	tst gb_flg,#PSR_C
	beq nojump
	b _C3x
#endif
@----------------------------------------------------------------------------
_DC:@	CALL C,$nnnn
@----------------------------------------------------------------------------
	tst gb_flg,#PSR_C
	bne _CD
	add gb_pc,gb_pc,#2
	fetch 12
@----------------------------------------------------------------------------
_DE:@	SBC #nn
@----------------------------------------------------------------------------
	ldrb r0,[gb_pc],#1
	opSBCb

@----------------------------------------------------------------------------
@_E0;	LD ($FF00+nn),A
@----------------------------------------------------------------------------

@----------------------------------------------------------------------------
_E1:@	POP HL
@----------------------------------------------------------------------------
	pop16 gb_hl
	mov gb_hl,gb_hl,lsl#16
	fetch 12
@----------------------------------------------------------------------------
@_E2;	LD ($FF00+C),A
@----------------------------------------------------------------------------

@----------------------------------------------------------------------------
_E5:@	PUSH HL
@----------------------------------------------------------------------------
	mov r0,gb_hl,lsr#16
	push16
	fetch 16
@----------------------------------------------------------------------------
_E6:@	AND #nn
@----------------------------------------------------------------------------
	ldrb r0,[gb_pc],#1
	opANDb
@----------------------------------------------------------------------------
_E8:@	ADD SP,dd
@----------------------------------------------------------------------------
	ldrsb r0,[gb_pc],#1
	@halfcarry and carry are based on unsigned low byte addition result
	mov r2,gb_sp,lsl#8
	eor r1,r2,r0,lsl#24
	adds r2,r2,r0,lsl#24
	eor gb_flg,r1,r2
	and gb_flg,gb_flg,#PSR_h
	add gb_sp,gb_sp,r0,lsl#16
	orrcs gb_flg,gb_flg,#PSR_C
	fetch 12
@----------------------------------------------------------------------------
_E9:@	JP HL
@----------------------------------------------------------------------------
	mov r1,gb_hl,lsr#28
	adr_ r2,memmap_tbl
	ldr r0,[r2,r1,lsl#2]
	str_ r0,lastbank
	add gb_pc,r0,gb_hl,lsr#16
@	mov gb_pc,gb_hl,lsr#16
@	encodePC
	fetch 4
@----------------------------------------------------------------------------
_EA:@	LD (nnnn),A	write A to (nnnn)
@----------------------------------------------------------------------------
	ldrb addy,[gb_pc],#1
	ldrb r0,[gb_pc],#1
	orr addy,addy,r0,lsl#8
	mov r0,gb_a,lsr#24
	writemem
	fetch 16
@----------------------------------------------------------------------------
_EE:@	XOR #nn
@----------------------------------------------------------------------------
	ldrb r0,[gb_pc],#1
	opXORb
@----------------------------------------------------------------------------
@_F0;	LD A,($FF00+nn)
@----------------------------------------------------------------------------

@----------------------------------------------------------------------------
_F1:@	POP AF
@----------------------------------------------------------------------------
	popAF
	decodeFLG
	fetch 12
@----------------------------------------------------------------------------
@_F2;	LD A,($FF00+C)
@----------------------------------------------------------------------------

@----------------------------------------------------------------------------
_F3:@	DI, disable interrupt
@----------------------------------------------------------------------------
	bic cycles,cycles,#CYC_IE
@	mov r0,#0
@	strb_ r0,gb_ime
	fetch 4
@----------------------------------------------------------------------------
_F5:@	PUSH AF
@----------------------------------------------------------------------------
	encodeFLG
	orr r0,r0,gb_a,lsr#16
	push16
	fetch 16
@----------------------------------------------------------------------------
_F6:@	OR #nn
@----------------------------------------------------------------------------
	ldrb r0,[gb_pc],#1
	opORb
@----------------------------------------------------------------------------
_F8:@	LD HL,SP+dd
@----------------------------------------------------------------------------
	ldrsb r0,[gb_pc],#1
	@halfcarry and carry are based on unsigned low byte addition result
	mov r2,gb_sp,lsl#8
	eor r1,r2,r0,lsl#24
	adds r2,r2,r0,lsl#24
	eor gb_flg,r1,r2
	and gb_flg,gb_flg,#PSR_h
	add gb_hl,gb_sp,r0,lsl#16
	orrcs gb_flg,gb_flg,#PSR_C
	fetch 12
@----------------------------------------------------------------------------
_F9:@	LD SP,HL
@----------------------------------------------------------------------------
	mov gb_sp,gb_hl
	fetch 8
@----------------------------------------------------------------------------
_FA:@	LD A,(nnnn)	load A from (nnnn)
@----------------------------------------------------------------------------
	ldrb addy,[gb_pc],#1
	ldrb r0,[gb_pc],#1
	orr addy,addy,r0,lsl#8
	readmem
	mov gb_a,r0,lsl#24
	fetch 16
@----------------------------------------------------------------------------
_D9:@	RETI, return and enable interrupt
@----------------------------------------------------------------------------
	pop16 gb_pc
	encodePC
	sub cycles,cycles,#12*CYCLE		@total of 16 cycles
@----------------------------------------------------------------------------
_FB:@	EI, enable interrupt
@----------------------------------------------------------------------------
	orr cycles,cycles,#CYC_IE
@	mov r0,#1
@	strb_ r0,gb_ime
	sub cycles,cycles,#4*CYCLE
	b checkIRQ
@----------------------------------------------------------------------------
_FE:@	CP #nn
@----------------------------------------------------------------------------
	ldrb r0,[gb_pc],#1
	opCPb
@----------------------------------------------------------------------------
_CB:@	Extensions
@----------------------------------------------------------------------------
	ldrb r0,[gb_pc],#1
	ldr pc,[pc,r0,lsl#2]
	.word 0
@----------------------------------------------------------------------------
cb_table:
	.word _CB00,_CB01,_CB02,_CB03,_CB04,_CB05,_CB06,_CB07,_CB08,_CB09,_CB0A,_CB0B,_CB0C,_CB0D,_CB0E,_CB0F
	.word _CB10,_CB11,_CB12,_CB13,_CB14,_CB15,_CB16,_CB17,_CB18,_CB19,_CB1A,_CB1B,_CB1C,_CB1D,_CB1E,_CB1F
	.word _CB20,_CB21,_CB22,_CB23,_CB24,_CB25,_CB26,_CB27,_CB28,_CB29,_CB2A,_CB2B,_CB2C,_CB2D,_CB2E,_CB2F
	.word _CB30,_CB31,_CB32,_CB33,_CB34,_CB35,_CB36,_CB37,_CB38,_CB39,_CB3A,_CB3B,_CB3C,_CB3D,_CB3E,_CB3F
	.word _CB40,_CB41,_CB42,_CB43,_CB44,_CB45,_CB46,_CB47,_CB40,_CB41,_CB42,_CB43,_CB44,_CB45,_CB46,_CB47
	.word _CB40,_CB41,_CB42,_CB43,_CB44,_CB45,_CB46,_CB47,_CB40,_CB41,_CB42,_CB43,_CB44,_CB45,_CB46,_CB47
	.word _CB40,_CB41,_CB42,_CB43,_CB44,_CB45,_CB46,_CB47,_CB40,_CB41,_CB42,_CB43,_CB44,_CB45,_CB46,_CB47
	.word _CB40,_CB41,_CB42,_CB43,_CB44,_CB45,_CB76,_CB47,_CB40,_CB41,_CB42,_CB43,_CB44,_CB45,_CB46,_CB47
	.word _CB80,_CB81,_CB82,_CB83,_CB84,_CB85,_CB86,_CB87,_CB80,_CB81,_CB82,_CB83,_CB84,_CB85,_CB86,_CB87
	.word _CB80,_CB81,_CB82,_CB83,_CB84,_CB85,_CB86,_CB87,_CB80,_CB81,_CB82,_CB83,_CB84,_CB85,_CB86,_CB87
	.word _CB80,_CB81,_CB82,_CB83,_CB84,_CB85,_CB86,_CB87,_CB80,_CB81,_CB82,_CB83,_CB84,_CB85,_CB86,_CB87
	.word _CB80,_CB81,_CB82,_CB83,_CB84,_CB85,_CB86,_CB87,_CB80,_CB81,_CB82,_CB83,_CB84,_CB85,_CB86,_CB87
	.word _CBC0,_CBC1,_CBC2,_CBC3,_CBC4,_CBC5,_CBC6,_CBC7,_CBC0,_CBC1,_CBC2,_CBC3,_CBC4,_CBC5,_CBC6,_CBC7
	.word _CBC0,_CBC1,_CBC2,_CBC3,_CBC4,_CBC5,_CBC6,_CBC7,_CBC0,_CBC1,_CBC2,_CBC3,_CBC4,_CBC5,_CBC6,_CBC7
	.word _CBC0,_CBC1,_CBC2,_CBC3,_CBC4,_CBC5,_CBC6,_CBC7,_CBC0,_CBC1,_CBC2,_CBC3,_CBC4,_CBC5,_CBC6,_CBC7
	.word _CBC0,_CBC1,_CBC2,_CBC3,_CBC4,_CBC5,_CBC6,_CBC7,_CBC0,_CBC1,_CBC2,_CBC3,_CBC4,_CBC5,_CBC6,_CBC7
@------------------------------------------------------------------------------

@------------------------------------------------------------------------------
_CB46:@		BIT x,(HL)	, actually CB-46,4E,56,5E,66,6E & 7E
@------------------------------------------------------------------------------
	readmemHL
	mov r2,r0,lsl#16
	ldrb r0,[gb_pc,#-1]
	opBITL r2
	fetch 12
@----------------------------------------------------------------------------
_CB47:@		BIT x,A		, actually CB-47,4F,57,5F,67,6F,77 & 7F
@----------------------------------------------------------------------------
	opBITH gb_a
	fetch 8
@------------------------------------------------------------------------------
_CB76:@		BIT 6,(HL)
@------------------------------------------------------------------------------
	readmemHL
	and gb_flg,gb_flg,#PSR_C	@keep C
	orr gb_flg,gb_flg,#PSR_h	@set h
	tst r0,#0x40
	orreq gb_flg,gb_flg,#PSR_Z	@Z
	fetch 12
@------------------------------------------------------------------------------

	.text

 .section .iwram.0, "ax", %progbits

@these got moved from rom because they were used frequently
@----------------------------------------------------------------------------
_CB12:@		RL D
@----------------------------------------------------------------------------
	opRLH gb_de
@----------------------------------------------------------------------------
_CB13:@		RL E
@----------------------------------------------------------------------------
	opRLL gb_de
@----------------------------------------------------------------------------
_CB14:@		RL H
@----------------------------------------------------------------------------
	opRLH gb_hl
@----------------------------------------------------------------------------
_CB23:@		SLA E
@----------------------------------------------------------------------------
	opSLAL gb_de
@----------------------------------------------------------------------------
_CB25:@		SLA L
@----------------------------------------------------------------------------
	opSLAL gb_hl
@----------------------------------------------------------------------------
_CB27:@		SLA A
@----------------------------------------------------------------------------
	opSLAA
@----------------------------------------------------------------------------
_CB37:@		SWAP A
@----------------------------------------------------------------------------
	opSWAPA
@----------------------------------------------------------------------------
_CB39:@		SRL C
@----------------------------------------------------------------------------
	opSRLL gb_bc
@----------------------------------------------------------------------------
_CB45:@		BIT x,L		, actually CB-45,4D,55,5D,65,6D,75 & 7D
@----------------------------------------------------------------------------
	opBITL gb_hl
	fetch 8



@----------------------------------------------------------------------------
 .align
 .pool
 .text
 .align
 .pool
@----------------------------------------------------------------------------

@----------------------------------------------------------------------------
_10:@	STOP	stops the processor until an (joypad) interrupt.
@----------------------------------------------------------------------------
	ldrb_ r0,doublespeed
	tst r0,#1
	blne_long speedswitch
	
@	b _noStop
@@	b _76 ;halt instead?
@	ldrb r1,gb_ime
@	tst r1,#1			;no Halt if IRQ disabled.
@	beq _noStop
@	ldrb r0,gb_ic		;interrupt confirm
@	cmp r0,#0
@	movne r0,#0
@	strneb r0,gb_ic
@	subeq gb_pc,gb_pc,#1
@	moveq cycles,#0
@_noStop
@	add gb_pc,gb_pc,#1
	fetch 4

	.ltorg
@----------------------------------------------------------------------------
_27:@	DAA	decimal adjust accumulator
@----------------------------------------------------------------------------
	tst gb_flg,#PSR_n
	bne 1f
	@adding
	mov r0,gb_a,lsl#4
	adds r0,r0,#0x60000000
	movccs r0,gb_flg,lsl#4
	addcss gb_a,gb_a,#0x06000000
	orrcs gb_flg,gb_flg,#PSR_C
	adds r0,gb_a,#0x60000000
	movccs r0,gb_flg,lsl#3
	addcss gb_a,gb_a,#0x60000000
	orrcs gb_flg,gb_flg,#PSR_C
2:
	@set flags after either adding or subtracting
	bic gb_flg,gb_flg,#PSR_Z|PSR_h	@clear zero and halfcarry flags
	tst gb_a,#0xFF000000
	orreq gb_flg,gb_flg,#PSR_Z	@set zero flag if zero
	fetch 4
1:
	@subtracting
	tst gb_flg,#PSR_h
	subne gb_a,gb_a,#0x06000000
	tst gb_flg,#PSR_C
	subne gb_a,gb_a,#0x60000000
	b 2b

@----------------------------------------------------------------------------
_3B:@	DEC SP
@----------------------------------------------------------------------------
	opDEC16 gb_sp
	fetch 8
@----------------------------------------------------------------------------
_74:@	LD (HL),H
@----------------------------------------------------------------------------
	mov r0,gb_hl,lsr#24
	writememHL
	fetch 8
@----------------------------------------------------------------------------
_75:@	LD (HL),L		special...
@----------------------------------------------------------------------------
	mov addy,gb_hl,lsr#16
	and r0,addy,#0xFF
	writemem
	fetch 8
@----------------------------------------------------------------------------
_BF:@	CP A
@----------------------------------------------------------------------------
	opCPA





@----------------------------------------------------------------------------
_CB00:@		RLC B
@----------------------------------------------------------------------------
	opRLCH gb_bc
@----------------------------------------------------------------------------
_CB01:@		RLC C
@----------------------------------------------------------------------------
	opRLCL gb_bc
@----------------------------------------------------------------------------
_CB02:@		RLC D
@----------------------------------------------------------------------------
	opRLCH gb_de
@----------------------------------------------------------------------------
_CB03:@		RLC E
@----------------------------------------------------------------------------
	opRLCL gb_de
@----------------------------------------------------------------------------
_CB04:@		RLC H
@----------------------------------------------------------------------------
	opRLCH gb_hl
@----------------------------------------------------------------------------
_CB05:@		RLC L
@----------------------------------------------------------------------------
	opRLCL gb_hl
@----------------------------------------------------------------------------
_CB06:@		RLC (HL)
@----------------------------------------------------------------------------
	readmemHL
	opRLCb
	writemem
	fetch 16
@----------------------------------------------------------------------------
_CB07:@		RLC A
@----------------------------------------------------------------------------
	opRLC gb_a
	fetch 8
@----------------------------------------------------------------------------
_CB08:@		RRC B
@----------------------------------------------------------------------------
	opRRCH gb_bc
@----------------------------------------------------------------------------
_CB09:@		RRC C
@----------------------------------------------------------------------------
	opRRCL gb_bc
@----------------------------------------------------------------------------
_CB0A:@		RRC D
@----------------------------------------------------------------------------
	opRRCH gb_de
@----------------------------------------------------------------------------
_CB0B:@		RRC E
@----------------------------------------------------------------------------
	opRRCL gb_de
@----------------------------------------------------------------------------
_CB0C:@		RRC H
@----------------------------------------------------------------------------
	opRRCH gb_hl
@----------------------------------------------------------------------------
_CB0D:@		RRC L
@----------------------------------------------------------------------------
	opRRCL gb_hl
@----------------------------------------------------------------------------
_CB0E:@		RRC (HL)
@----------------------------------------------------------------------------
	readmemHL
	opRRCb
	writemem
	fetch 16
@----------------------------------------------------------------------------
_CB0F:@		RRC A
@----------------------------------------------------------------------------
	opRRCA

	.pushsection .iwram.0
@----------------------------------------------------------------------------
_CB10:@		RL B
@----------------------------------------------------------------------------
	opRLH gb_bc
@----------------------------------------------------------------------------
_CB11:@		RL C
@----------------------------------------------------------------------------
	opRLL gb_bc
	.popsection

	.pushsection .vram1, "ax", %progbits
@----------------------------------------------------------------------------
_CB15:@		RL L
@----------------------------------------------------------------------------
	opRLL gb_hl
	.popsection

@----------------------------------------------------------------------------
_CB16:@		RL (HL)
@----------------------------------------------------------------------------
	readmemHL
	opRLb
	writemem
	fetch 16
@----------------------------------------------------------------------------
_CB17:@		RL A
@----------------------------------------------------------------------------
	opRL gb_a
	fetch 8
@----------------------------------------------------------------------------
_CB18:@		RR B
@----------------------------------------------------------------------------
	opRRH gb_bc
	.pushsection .vram1, "ax", %progbits
@----------------------------------------------------------------------------
_CB19:@		RR C
@----------------------------------------------------------------------------
	opRRL gb_bc
	.popsection
@----------------------------------------------------------------------------
_CB1A:@		RR D
@----------------------------------------------------------------------------
	opRRH gb_de

	.pushsection .iwram.0
@----------------------------------------------------------------------------
_CB1B:@		RR E
@----------------------------------------------------------------------------
	opRRL gb_de
	.popsection

@----------------------------------------------------------------------------
_CB1C:@		RR H
@----------------------------------------------------------------------------
	opRRH gb_hl

	.pushsection .iwram.0
@----------------------------------------------------------------------------
_CB1D:@		RR L
@----------------------------------------------------------------------------
	opRRL gb_hl
	.popsection

@----------------------------------------------------------------------------
_CB1E:@		RR (HL)
@----------------------------------------------------------------------------
	readmemHL
	opRRb
	writemem
	fetch 16
@----------------------------------------------------------------------------
_CB1F:@		RR A
@----------------------------------------------------------------------------
	opRR gb_a
	fetch 8
@----------------------------------------------------------------------------
_CB20:@		SLA B
@----------------------------------------------------------------------------
	opSLAH gb_bc

	.pushsection .iwram.0
@----------------------------------------------------------------------------
_CB21:@		SLA C
@----------------------------------------------------------------------------
	opSLAL gb_bc
	.popsection

@----------------------------------------------------------------------------
_CB22:@		SLA D
@----------------------------------------------------------------------------
	opSLAH gb_de
@----------------------------------------------------------------------------
_CB24:@		SLA H
@----------------------------------------------------------------------------
	opSLAH gb_hl
@----------------------------------------------------------------------------
_CB26:@		SLA (HL)
@----------------------------------------------------------------------------
	readmemHL
	opSLAb
	writemem
	fetch 16
@----------------------------------------------------------------------------
_CB28:@		SRA B
@----------------------------------------------------------------------------
	opSRAH gb_bc
@----------------------------------------------------------------------------
_CB29:@		SRA C
@----------------------------------------------------------------------------
	opSRAL gb_bc
@----------------------------------------------------------------------------
_CB2A:@		SRA D
@----------------------------------------------------------------------------
	opSRAH gb_de
@----------------------------------------------------------------------------
_CB2B:@		SRA E
@----------------------------------------------------------------------------
	opSRAL gb_de
@----------------------------------------------------------------------------
_CB2C:@		SRA H
@----------------------------------------------------------------------------
	opSRAH gb_hl
@----------------------------------------------------------------------------
_CB2D:@		SRA L
@----------------------------------------------------------------------------
	opSRAL gb_hl
@----------------------------------------------------------------------------
_CB2E:@		SRA (HL)
@----------------------------------------------------------------------------
	readmemHL
	opSRAb
	writemem
	fetch 16
	.pushsection .iwram.0
@----------------------------------------------------------------------------
_CB2F:@		SRA A
@----------------------------------------------------------------------------
	opSRAA
	.popsection
@----------------------------------------------------------------------------
_CB30:@		SWAP B
@----------------------------------------------------------------------------
	opSWAPH gb_bc
@----------------------------------------------------------------------------
_CB31:@		SWAP C
@----------------------------------------------------------------------------
	opSWAPL gb_bc
@----------------------------------------------------------------------------
_CB32:@		SWAP D
@----------------------------------------------------------------------------
	opSWAPH gb_de
@----------------------------------------------------------------------------
_CB33:@		SWAP E
@----------------------------------------------------------------------------
	opSWAPL gb_de
@----------------------------------------------------------------------------
_CB34:@		SWAP H
@----------------------------------------------------------------------------
	opSWAPH gb_hl
@----------------------------------------------------------------------------
_CB35:@		SWAP L
@----------------------------------------------------------------------------
	opSWAPL gb_hl
@----------------------------------------------------------------------------
_CB36:@		SWAP (HL)
@----------------------------------------------------------------------------
	readmemHL
	opSWAPb
	writemem
	fetch 16

	.pushsection .iwram.0
@----------------------------------------------------------------------------
_CB38:@		SRL B
@----------------------------------------------------------------------------
	opSRLH gb_bc
	.popsection
	
	.pushsection .vram1, "ax", %progbits
@----------------------------------------------------------------------------
_CB3A:@		SRL D
@----------------------------------------------------------------------------
	opSRLH gb_de
	.popsection
@----------------------------------------------------------------------------
_CB3B:@		SRL E
@----------------------------------------------------------------------------
	opSRLL gb_de
	.pushsection .vram1, "ax", %progbits
@----------------------------------------------------------------------------
_CB3C:@		SRL H
@----------------------------------------------------------------------------
	opSRLH gb_hl
	.popsection
@----------------------------------------------------------------------------
_CB3D:@		SRL L
@----------------------------------------------------------------------------
	opSRLL gb_hl
@----------------------------------------------------------------------------
_CB3E:@		SRL (HL)
@----------------------------------------------------------------------------
	readmemHL
	opSRLx r0,r0,1
	writemem
	fetch 16

	.pushsection .iwram.0
@----------------------------------------------------------------------------
_CB3F:@		SRL A
@----------------------------------------------------------------------------
	opSRLA
@----------------------------------------------------------------------------
_CB40:@		BIT x,B		, actually CB-40,48,50,58,60,68,70 & 78
@----------------------------------------------------------------------------
	opBITH gb_bc
	fetch 8
	.popsection

	.pushsection .vram1, "ax", %progbits
@----------------------------------------------------------------------------
_CB41:@		BIT x,C		, actually CB-41,49,51,59,61,69,71 & 79
@----------------------------------------------------------------------------
	opBITL gb_bc
	fetch 8
	.popsection
@----------------------------------------------------------------------------
_CB42:@		BIT x,D		, actually CB-42,4A,52,5A,62,6A,72 & 7A
@----------------------------------------------------------------------------
	opBITH gb_de
	fetch 8

	.pushsection .vram1, "ax", %progbits
@----------------------------------------------------------------------------
_CB43:@		BIT x,E		, actually CB-43,4B,53,5B,63,6B,73 & 7B
@----------------------------------------------------------------------------
	opBITL gb_de
	fetch 8
	.popsection

	.pushsection .iwram.0
@----------------------------------------------------------------------------
_CB44:@		BIT x,H		, actually CB-44,4C,54,5C,64,6C,74 & 7C
@----------------------------------------------------------------------------
	opBITH gb_hl
	fetch 8
	.popsection

@----------------------------------------------------------------------------
_CB80:@		RES x,B		, actually CB-80,88,90,98,A0,A8,B0 & B8
@----------------------------------------------------------------------------
	opRESH gb_bc
	fetch 8
@----------------------------------------------------------------------------
_CB81:@		RES x,C		, actually CB-81,89,81,89,A1,A9,B1 & B9
@----------------------------------------------------------------------------
	opRESL gb_bc
	fetch 8

	.pushsection .iwram.0
@----------------------------------------------------------------------------
_CB82:@		RES x,D		, actually CB-82,8A,92,9A,A2,AA,B2 & BA
@----------------------------------------------------------------------------
	opRESH gb_de
	fetch 8
	.popsection

@----------------------------------------------------------------------------
_CB83:@		RES x,E		, actually CB-83,8B,93,9B,A3,AB,B3 & BB
@----------------------------------------------------------------------------
	opRESL gb_de
	fetch 8
@----------------------------------------------------------------------------
_CB84:@		RES x,H		, actually CB-84,8C,94,9C,A4,AC,B4 & BC
@----------------------------------------------------------------------------
	opRESH gb_hl
	fetch 8
@----------------------------------------------------------------------------
_CB85:@		RES x,L		, actually CB-85,8D,95,9D,A5,AD,B5 & BD
@----------------------------------------------------------------------------
	opRESL gb_hl
	fetch 8

	.pushsection .iwram.0
@----------------------------------------------------------------------------
_CB86:@		RES x,(HL)	, actually CB-86,8E,96,9E,A6,AE,B6 & BE
@----------------------------------------------------------------------------
	readmemHL
	mov r2,r0,lsl#16
	ldrb r0,[gb_pc,#-1]
	opRESL r2
	mov r0,r2,lsr#16
	writemem
	fetch 16
	.popsection

@----------------------------------------------------------------------------
_CB87:@		RES x,A		, actually CB-87,8F,97,9F,A7,AF,B7 & BF
@----------------------------------------------------------------------------
	opRESH gb_a
	fetch 8
@----------------------------------------------------------------------------
_CBC0:@		SET x,B		, actually CB-C0,C8,D0,D8,E0,E8,F0 & F8
@----------------------------------------------------------------------------
	opSETH gb_bc
	fetch 8
@----------------------------------------------------------------------------
_CBC1:@		SET x,C		, actually CB-C1,C9,D1,D9,E1,E9,F1 & F9
@----------------------------------------------------------------------------
	opSETL gb_bc
	fetch 8

	.pushsection .iwram.0
@----------------------------------------------------------------------------
_CBC2:@		SET x,D		, actually CB-C2,CA,D2,DA,E2,EA,F2 & FA
@----------------------------------------------------------------------------
	opSETH gb_de
	fetch 8
	.popsection

@----------------------------------------------------------------------------
_CBC3:@		SET x,E		, actually CB-C3,CB,D3,DB,E3,EB,F3 & FB
@----------------------------------------------------------------------------
	opSETL gb_de
	fetch 8
@----------------------------------------------------------------------------
_CBC4:@		SET x,H		, actually CB-C4,CC,D4,DC,E4,EC,F4 & FC
@----------------------------------------------------------------------------
	opSETH gb_hl
	fetch 8
@----------------------------------------------------------------------------
_CBC5:@		SET x,L		, actually CB-C5,CD,D5,DD,E5,ED,F5 & FD
@----------------------------------------------------------------------------
	opSETL gb_hl
	fetch 8

	.pushsection .vram1, "ax", %progbits
@----------------------------------------------------------------------------
_CBC6:@		SET x,(HL)	, actually CB-C6,CE,D6,DE,E6,EE,F6 & FE
@----------------------------------------------------------------------------
	readmemHL
	mov r2,r0,lsl#16
	ldrb r0,[gb_pc,#-1]
	opSETL r2
	mov r0,r2,lsr#16
	writemem
	fetch 16
	.popsection
@----------------------------------------------------------------------------
_CBC7:@		SET x,A		, actually CB-C7,CF,D7,DF,E7,EF,F7 & FF
@----------------------------------------------------------------------------
	opSETH gb_a
	fetch 8
@----------------------------------------------------------------------------

update_doublespeed_ui: @called from UI
	stmfd sp!,{globalptr,addy,lr}
	ldr globalptr,=GLOBAL_PTR_BASE
	bl updatespeed
	ldmfd sp!,{globalptr,addy,lr}
	bx lr

speedswitch:
	ldrb_ r0,doublespeed
	bic r0,r0,#0x7F
	eors r0,r0,#0x80
	strb_ r0,doublespeed
updatespeed:
	@set single speed
	mov r0,#SINGLE_SPEED
	str_ r0,timercyclesperscanline
	str_ r0,cyclesperscanline
	mov r0,#SINGLE_SPEED_SCANLINE_OAM_POSITION
	str_ r0,scanline_oam_position
	ldr r12,=FF41_modify1
	ldr r0,FF41_modifydata
	str r0,[r12]
	ldr r12,=FF41_modify2
	ldr r0,FF41_modifydata+4
	str r0,[r12]
#if LCD_HACKS
#if !LCD_HACKS_ACCURATE_DIV
	ldr r0,FF41_modifydata+16
	ldr r12,=FF41_modify1b
	str r0,[r12]
#endif

#if LCD_HACKS_ACCURATE
	ldr r0,FF41_modifydata+40
	ldr r12,=FF41_hack_setmode0
	str r0,[r12]
#endif
#endif
#if EARLY_LINE_0
	ldr r0,FF41_modifydata+24
	ldr r12,=toLineZero_modify1
	str r0,[r12]
	ldr r0,FF41_modifydata+32
	ldr r12,=toLineZero_modify2
	str r0,[r12]
#endif
	
	ldr r0,FF41_modifydata
	
	ldrb_ r0,doublespeed
	tst r0,#0x80
	bxeq lr

	@set double speed timers
	ldrb_ r0,doubletimer_
	tst r0,#2
	mov r0,#DOUBLE_SPEED
	str_ r0,timercyclesperscanline
	bxeq lr
	@set double speed
	str_ r0,cyclesperscanline
	mov r0,#DOUBLE_SPEED_SCANLINE_OAM_POSITION
	str_ r0,scanline_oam_position
	ldr r12,=FF41_modify1
	ldr r0,FF41_modifydata+8
	str r0,[r12]
	ldr r12,=FF41_modify2
	ldr r0,FF41_modifydata+12
	str r0,[r12]
#if LCD_HACKS
#if !LCD_HACKS_ACCURATE_DIV
	ldr r0,FF41_modifydata+20
	ldr r12,=FF41_modify1b
	str r0,[r12]
#endif

#if LCD_HACKS_ACCURATE
	ldr r0,FF41_modifydata+44
	ldr r12,=FF41_hack_setmode0
	str r0,[r12]
#endif
	
#endif
#if EARLY_LINE_0
	ldr r0,FF41_modifydata+28
	ldr r12,=toLineZero_modify1
	str r0,[r12]
	ldr r0,FF41_modifydata+36
	ldr r12,=toLineZero_modify2
	str r0,[r12]
#endif
	bx lr

FF41_modifydata:
	cmp cycles,#204*CYCLE
	cmp cycles,#376*CYCLE
	cmp cycles,#204*CYCLE*2
	cmp cycles,#376*CYCLE*2
	add cycles,cycles,#204*CYCLE
	add cycles,cycles,#204*CYCLE*2
	adds cycles,cycles,#8*CYCLE
	adds cycles,cycles,#16*CYCLE
	sub r0,r0,#8*CYCLE
	sub r0,r0,#16*CYCLE
	subs r2,cycles,#204*CYCLE
	subs r2,cycles,#204*CYCLE*2

 .if PROFILE
fetch_profile:
	bl profile_it
	ldrplb r0,[gb_pc],#1
	ldrpl pc,[gb_optbl,r0,lsl#2]
	ldr_ pc,nexttimeout
	
profile_it:
	ldr_ r0,lastbank
	sub r0,gb_pc,r0
@	sub r0,r0,#1
	bic r0,r0,#0x8000
	
	mov r0,r0,lsl#2
	ldr r1,=0x02008000
	ldr r2,[r1,r0]
	add r2,r2,#1
	str r2,[r1,r0]
	bx lr
profile_reset:
	ldr r0,=0x02008000
	mov r1,#0x8000
	mov r2,#0
pr_loop:
	str r2,[r0],#4
	subs r1,r1,#1
	bne pr_loop
	bx lr
 .endif

sram_W2_instruction_save32:
 	sub r1,r1,#0x4000   @32k sram: A000>>6000
sram_W2_instruction_save64:
	add r1,r1,#0x4000   @64k sram: A000>>E000

@----------------------------------------------------------------------------
emu_reset:	@called by loadcart (r0-r9 are free to use)
@----------------------------------------------------------------------------
	str lr,[sp,#-4]!
	bl IO_reset
	bl Sound_reset
	bl GFX_reset
	bl sgb_reset
@---Speed - normal GB
	@gfx_reset zeroes doublespeed byte, this commits that change
	bl_long updatespeed
cpu_reset:
	@reset SRAM size - so it can tell the actual SRAM size detected
	ldr r0,=save_start
	ldr r0,[r0]
	cmp r0,#0xE000
	
	ldreq r0,sram_W2_instruction_save64
	ldrne r0,sram_W2_instruction_save32
	ldr r1,=sram_W2_modify
	str r0,[r1]

	mov r0,#0
	str_ r0,FF41_PC
	str_ r0,FF41_PC_2
	str_ r0,FF41_PC_3

	
@---cpu reset
#if SPEEDHACKS_NEW
	bl speedhack_reset
#endif
#if JOYSTICK_READ_HACKS
	mov r1,#-64
	strb_ r1,joy_read_count
#endif

	bl game_specific_hacks_reset
 .if PROFILE
	bl profile_reset
 .endif
	ldrb_ r0,gbcmode
	cmp r0,#0
	moveq gb_a,#0x01000000	@0x01=Normal GB/SGB, 0xFF=PocketGB/SGB2, 0x11=CGB/AGB.
	ldreq gb_bc,=0x00130000	@Breg->0=Normal,1=AGB
	movne gb_a,#0x11000000	@0x01=Normal GB/SGB, 0xFF=PocketGB/SGB2, 0x11=CGB/AGB.
	ldrne gb_bc,=0x00130000	@Breg->0=Normal,1=AGB
	ldrneb_ r0,gbamode
	movnes r0,r0
	ldrne gb_bc,=0x01130000	@Breg->0=Normal,1=AGB
	mov gb_de,#0x00d80000
@	movne gb_de,#0x00200000	;For Goomba detection, e=0x20
	ldr gb_hl,=0x014d0000
	mov gb_flg,#PSR_Z+PSR_C+PSR_h
	mov r0,#0
	bl_long _FF70W  @set WRAM page #0
	mov r1,#0
	@strb_ r1,doublespeed
	@bl_long updatespeed
	@mov r1,#0
	@IRQ gets disabled by setting cycles to 0
@	str_ r1,gb_ime		@disable all IRQ
	strb_ r1,gb_if
	strb_ r1,gb_ie
	str_ r1,dividereg
	str_ r1,timercounter	@reset timers
	str_ r1,timermodulo	@reset timers

	str_ r1,frame		@frame count reset

	ldr gb_sp,=0xfffe0000
	mov cycles,#CYC_LCD_ENABLED		@IRQ enable bit is clear here

	@(clear irq/nmi/res source)...

	mov gb_pc,#0x100
@	mov gb_pc,#0		;for BIOS
	encodePC			@get RESET vector

	adr_ r0,cpuregs
	stmia r0,{gb_flg-gb_pc,gb_sp}
	ldr pc,[sp],#4

@----------------------------------------------------------------------------
run:	@r0=0 to return after frame
@----------------------------------------------------------------------------
	tst r0,#1
	stmeqfd sp!,{gb_flg-gb_pc,globalptr,r11,lr}

	ldr globalptr,=GLOBAL_PTR_BASE
	strb_ r0,dontstop_
	mov r1,#0
	strb_ r1,novblankwait_

	b_long line0x

.text


#if SPEEDHACKS_NEW
speedhack_reset:
	ldr r10,=GLOBAL_PTR_BASE
	mov r0,#0
	str_ r0,speedhack_pc
	strb_ r0,quickhackused
	strb_ r0,quickhackcounter
	
	ldr r2,=speedhack_modify
	ldr r0,speedhack_modify_values+0
	str r0,[r2]
	
	ldr r0,=_18
	str r0,[r10,#0x18 * 4]
	ldr r0,=_20
	str r0,[r10,#0x20 * 4]
	ldr r0,=_28
	str r0,[r10,#0x28 * 4]
	ldr r0,=_30
	str r0,[r10,#0x30 * 4]
	ldr r0,=_38
	str r0,[r10,#0x38 * 4]
	ldr r0,=_C2
	str r0,[r10,#0xC2 * 4]
	ldr r0,=_C3
	str r0,[r10,#0xC3 * 4]
	ldr r0,=_CA
	str r0,[r10,#0xCA * 4]
	ldr r0,=_D2
	str r0,[r10,#0xD2 * 4]
	ldr r0,=_DA
	str r0,[r10,#0xDA * 4]
	bx lr
speedhack_modify_values:
	bx lr
	nop
	
install_speedhack:
	mov r11,r11
	@r0 = speedhack_pc
	cmp r1,#0
	mov r1,r0
	stmfd sp!,{lr}
	bl speedhack_reset
	adr lr,0f
	bne speedhack_jumps
	ldrb r0,[r1,#-2]
	ldrsb r2,[r1,#-1]
	add r12,r1,r2
	str_ r12,speedhack_pc
	and r2,r2,#0xFF
	rsb r2,r2,#0x100
	
	@new code: speedhacks with RAM values if first instruction is FA, and branch length is 8 or less
	cmp r2,#0x09
	bgt 1f
	ldrb r1,[r12]
	cmp r1,#0xFA
	bne 1f
	@ldrb_ r1,speedhack_mode
	@tst r1,#0x01
	@beq 1f
	
	ldrb r1,[r12,#1]
	ldrb r12,[r12,#2]
	orr r1,r1,r12,lsl#8
	strh_ r1,speedhack_ram_address
	ldr r1,=speedhack_modify
	ldr r12,speedhack_modify_values+4
	str r12,[r1]
	
1:	
	cmp r0,#0x18  @jr
	beq speedhack_jr  
	cmp r0,#0x20  @jr nz
	beq speedhack_jrnz
	cmp r0,#0x28  @jr z
	beq speedhack_jrz
	cmp r0,#0x30  @jr nc
	beq speedhack_jrnc
	cmp r0,#0x38  @jr c
	beq speedhack_jrc
	bx lr
speedhack_jumps:
	str_ r1,speedhack_pc
	ldrb r0,[r1,#-1]
	cmp r0,#0xC2
	beq speedhack_jpnz
	cmp r0,#0xC3
	beq speedhack_jp
	cmp r0,#0xCA
	beq speedhack_jpz
	cmp r0,#0xD2
	beq speedhack_jpnc
	cmp r0,#0xDA
	beq speedhack_jpc
0:
	ldmfd sp!,{lr}
	bx lr
speedhack_jr:
	ldr r0,=_18x_modify
	strb r2,[r0]
	ldr r0,=_18x
	str r0,[r10,#0x18*4]
	bx lr
speedhack_jrnz:
	ldr r0,=_20x_modify
	strb r2,[r0]
	ldr r0,=_20x
	str r0,[r10,#0x20*4]
	bx lr
speedhack_jrz:
	ldr r0,=_28x_modify
	strb r2,[r0]
	ldr r0,=_28x
	str r0,[r10,#0x28*4]
	bx lr
speedhack_jrnc:
	ldr r0,=_30x_modify
	strb r2,[r0]
	ldr r0,=_30x
	str r0,[r10,#0x30*4]
	bx lr
speedhack_jrc:
	ldr r0,=_38x_modify
	strb r2,[r0]
	ldr r0,=_38x
	str r0,[r10,#0x38*4]
	bx lr

speedhack_jp:
	ldr r0,=_C3x
	str r0,[r10,#0xC3*4]
	bx lr
speedhack_jpnz:
	ldr r0,=_C2x
	str r0,[r10,#0xC2*4]
	bx lr
speedhack_jpz:
	ldr r0,=_CAx
	str r0,[r10,#0xCA*4]
	bx lr
speedhack_jpnc:
	ldr r0,=_D2x
	str r0,[r10,#0xD2*4]
	bx lr
speedhack_jpc:
	ldr r0,=_DAx
	str r0,[r10,#0xDA*4]
	bx lr

#endif

@----------------------------------------------------------------------------
 .section .iwram.end.100, "ax", %progbits
@----------------------------------------------------------------------------

_speedhack_ram_address:
	.byte 0,0
	.byte 0,0

_quickhackused:
	.byte 0 @quickhackused
_quickhackcounter:
	.byte 0 @quickhackcounter
_joy_read_count:
	.byte 0 @joy_read_count
	.byte 0
_speedhack_pc:
	.word 0 @speedhack_pc
  @readmem_tbl_begin
g_readmem_tbl:
@table is backwards for speed

	.word IO_R	@$F000	IO
	.word IO_R	@$E000	IO
	.word mem_RC0_2	@$D000	WRAM
	.word mem_RC0	@$C000	WRAM
	.word mem_RA0	@$B000	ERAM/SRAM (in cartridge)
	.word mem_RA0	@$A000	ERAM/SRAM (in cartridge)
	.word mem_R80	@$9000	VRAM
	.word mem_R80	@$8000	VRAM
	.word mem_R60	@$7000	ROM/
	.word mem_R60	@$6000	ROM/
	.word mem_R40	@$5000	ROM-- Switchable (in cartridge)
	.word mem_R40	@$4000	ROM-- Switchable (in cartridge)
	.word mem_R20	@$3000	ROM/
	.word mem_R20	@$2000	ROM/
	.word mem_R00	@$1000	ROM-- Non switchable (in cartridge)
	.word mem_R00	@$0000	ROM-- Non switchable (in cartridge)

@readmem_tbl_ is 4 bytes behind this point

GLOBAL_PTR_BASE:
op_table:
	.word _00,_01,_02,_03,_04,_05,_06,_07,_08,_09,_0A,_0B,_0C,_0D,_0E,_0F
	.word _10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_1A,_1B,_1C,_1D,_1E,_1F
	.word _20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_2Ax,_2B,_2C,_2D,_2E,_2F
	.word _30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_3A,_3B,_3C,_3D,_3E,_3F
	.word _40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_4A,_4B,_4C,_4D,_4E,_4F
	.word _50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_5A,_5B,_5C,_5D,_5E,_5F
	.word _60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_6A,_6B,_6C,_6D,_6E,_6F
	.word _70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_7A,_7B,_7C,_7D,_7E,_7F
	.word _80,_81,_82,_83,_84,_85,_86,_87,_88,_89,_8A,_8B,_8C,_8D,_8E,_8F
	.word _90,_91,_92,_93,_94,_95,_96,_97,_98,_99,_9A,_9B,_9C,_9D,_9E,_9F
	.word _A0,_A1,_A2,_A3,_A4,_A5,_A6,_A7,_A8,_A9,_AA,_AB,_AC,_AD,_AE,_AF
	.word _B0,_B1,_B2,_B3,_B4,_B5,_B6,_B7,_B8,_B9,_BA,_BB,_BC,_BD,_BE,_BF
	.word _C0,_C1,_C2,_C3,_C4,_C5,_C6,_C7,_C8,_C9,_CA,_CB,_CC,_CD,_CE,_CF
	.word _D0,_D1,_D2,_xx,_D4,_D5,_D6,_D7,_D8,_D9,_DA,_xx,_DC,_xx,_DE,_DF
	.word _E0,_E1,_E2,_xx,_xx,_E5,_E6,_E7,_E8,_E9,_EA,_xx,_xx,_ED,_EE,_EF
	.word _F0,_F1,_F2,_F3,_xx,_F5,_F6,_F7,_F8,_F9,_FA,_FB,_xx,_xx,_FE,_FF
  @writemem_tbl
g_writemem_tbl:
	.word void	@$0000  filled in by initmapper.
	.word void	@$1000  filled in by initmapper.
	.word void	@$2000    /
	.word void	@$3000    /
	.word void	@$4000   /
	.word void	@$5000   /
	.word void	@$6000  /
	.word void	@$7000  /
	.word vram_W_8	@$8000
	.word vram_W_9	@$9000
	.word sram_W	@$A000	also RTC?
	.word sram_W	@$B000	also RTC?
	.word wram_W	@$C000
	.word wram_W_2	@$D000
	.word IO_W	@$E000
	.word IO_W	@$F000
g_memmap_tbl:
rommap:	.skip 8*4		@$0000-7FFF (rommap only used for savestates)
	.word 0		@$8000
	.word 0		@$9000
	.word 0		@$A000
	.word 0		@$B000
	.word 0		@$C000
	.word 0		@$D000
	.word 0		@$E000
	.word 0		@$F000

cpustate:
	@group these together for save/loadstate
	.skip 8*4 @cpuregs (flg,a,bc,de,hl,cycles,pc)
	.byte 0 @unused, was gb_ime (interrupt master enable)
_gb_ie:
	.byte 0 @gb_ie:	(interrupt enable, adr $FFFF)
_gb_if:
	.byte 0 @gb_if:	(interrupt flags, adr $FF0F)
	.byte 0 @_
_rambank:
	.byte 0 @rambank
_gbcmode:
gbc_mode:
	.byte 0 @gbcmode
_sgbmode:
sgb_mode:
	.byte 0 @sgbmode
	.byte 0 @_

_dividereg:
	.word 0 @dividereg
_timercounter:
	.word 0 @timercounter
_timermodulo:
	.byte 0 @timermodulo
_timerctrl:
	.byte 0 @timerctrl
_stctrl:
	.byte 0 @stctrl
	.byte 0 @_
frametotal:		@let ui.c see frame count for savestates
_frame:
	.word 0 @frame
@@end of cpustate
_nexttimeout:
	.word 0 @nexttimeout:  jump here when cycles runs out
_nexttimeout_alt:
	.word 0 @nexttimeout_alt
_scanlinehook:
	.word 0 @scanlinehook
_lastbank:
	.word 0 @lastbank: last memmap added to PC (used to calculate current PC)
_cyclesperscanline:
	.word 0 @cyclesperscanline (DMG=456*CYCLE, CGB=912*CYCLE)
_scanline_oam_position:
	.word 0 @scanline_oam_position (DMG=204*CYCLE, CGB=408*CYCLE)
_timercyclesperscanline:
	.word 0 @timercyclesperscanline
@ .if PROFILE
@	.word 0x02008000 @profiler
@ .endif
doubletimer:
	.byte 2 @doubletimer_
_gbamode:
request_gba_mode:
	.byte 0 @gbamode
request_gb_type:
	.byte 4 @request_gb_type_
novblankwait:
	.byte 0 @novblankwait_


 .if RESIZABLE
XGB_sram:	.word 0
XGB_sramsize:	.word 0
XGB_vram:	.word 0
XGB_vramsize:	.word 0
GBC_exram:	.word 0
GBC_exramsize:	.word 0
END_of_exram:	.word 0
XGB_vram_1800:	.word 0
XGB_vram_1C00:	.word 0
SGB_pals:	.word 0
SGB_atfs:	.word 0
SGB_packet:	.word 0
SGB_attributes:	.word 0
	.skip 12	@padding
 .endif
@----------------------------------------------------------------------------
 .section .iwram.end.107, "ax", %progbits
XGB_RAM: .skip 0x2000
XGB_HRAM: .skip 0x80
 .section .bss.end
 .align
CANARY1:	.skip 4
gbc_palette:	.skip 128	@CGB $FF68-$FF6D???
gbc_palette2:	.skip 128
CHR_DECODE: .skip 0x400
CANARY2:	.skip 4


	@.end

