 .if SPEEDHACKS_OLD
	.global g_hackflags
	.global g_hackflags2
	.global SPEEDHACK_FIND_JR_Z_BUF
	.global SPEEDHACK_FIND_JR_NZ_BUF
	.global SPEEDHACK_FIND_JR_C_BUF
	.global SPEEDHACK_FIND_JR_NC_BUF
 .endif	

	.if SPEEDHACKS_OLD
	.global g_hackflags
	.global g_hackflags2
	.global cpuhack_reset
	.endif

	.if SPEEDHACKS_OLD
@----------------------------------------------------------------------------
_20x:@	JR NZ,*	jump if not zero - speedhack version
@----------------------------------------------------------------------------
	ldrsb r0,[gb_pc],#1
	tst gb_flg,#PSR_Z
	bne 0f
	add gb_pc,gb_pc,r0
	sub cycles,cycles,#4*CYCLE
	cmp r0,#-4
	andeq cycles,cycles,#CYC_MASK
0:
	fetch 8
	.endif

	.if SPEEDHACKS_OLD
@----------------------------------------------------------------------------
_28x:@	JR Z,*	jump if zero - speedhack version
@----------------------------------------------------------------------------
	tst gb_flg,#PSR_Z
	ldrsb r0,[gb_pc],#1
	beq 0f
	add gb_pc,gb_pc,r0
	sub cycles,cycles,#4*CYCLE
	cmp r0,#-4
	andeq cycles,cycles,#CYC_MASK
0:
	fetch 8

	.endif

	.if SPEEDHACKS_OLD
@----------------------------------------------------------------------------
_30x:@	JR NC,*	jump if no carry - speedhack version
@----------------------------------------------------------------------------
	tst gb_flg,#PSR_C
	ldrsb r0,[gb_pc],#1
	bne 0f
	add gb_pc,gb_pc,r0
	sub cycles,cycles,#4*CYCLE
	cmp r0,#-4
	andeq cycles,cycles,#CYC_MASK
0:
	fetch 8
	.endif

	.if SPEEDHACKS_OLD
@----------------------------------------------------------------------------
_38x:@	JR C,*	jump if carry - speedhack version
@----------------------------------------------------------------------------
	tst gb_flg,#PSR_C
	ldrsb r0,[gb_pc],#1
	beq 0f
	add gb_pc,gb_pc,r0
	sub cycles,cycles,#4*CYCLE
	cmp r0,#-4
	andeq cycles,cycles,#CYC_MASK
0:
	fetch 8
	.endif

	.if SPEEDHACKS_OLD
@----------------------------------------------------------------------------
_20z:@	JR NZ,*	jump if not zero - speedhack version
@----------------------------------------------------------------------------
	ldr r1,=SPEEDHACK_FIND_JR_NZ_BUF
	ldr r2,=_20
	b _find_speedhack_thingy
@----------------------------------------------------------------------------
_28z:@	JR Z,*	jump if zero - speedhack version
@----------------------------------------------------------------------------
	ldr r1,=SPEEDHACK_FIND_JR_Z_BUF
	ldr r2,=_28
	b _find_speedhack_thingy
@----------------------------------------------------------------------------
_30z:@	JR NC,*	jump if no carry - speedhack version
@----------------------------------------------------------------------------
	ldr r1,=SPEEDHACK_FIND_JR_NC_BUF
	ldr r2,=_30
	b _find_speedhack_thingy
@----------------------------------------------------------------------------
_38z:@	JR C,*	jump if carry - speedhack version
@----------------------------------------------------------------------------
	ldr r1,=SPEEDHACK_FIND_JR_C_BUF
	ldr r2,=_38
	b _find_speedhack_thingy

_find_speedhack_thingy:
	ldrsb r0,[gb_pc]

	@between -17 and -2
	cmp r0,#-17
	bxlt r2
	cmp r0,#-2
	bxgt r2
	rsb r0,r0,#0
	sub r0,r0,#2
	mov r0,r0,lsl#2
	add r0,r0,r1
	ldr r1,[r0]
	add r1,r1,#1
	str r1,[r0]
	bx r2
	.endif

	.if SPEEDHACKS_OLD
normalops:
	.word _20,_28,_30,_38
jmpops:
	.word _20x,_28x,_30x,_38x
finderops:
	.word _20z,_28z,_30z,_38z
opindex:
	.word op_table+0x20*4,op_table+0x28*4,op_table+0x30*4,op_table+0x38*4

cpuhack_reset:
	stmfd sp!,{r0-r4,r10}
	ldr r10,=GLOBAL_PTR_BASE

	ldrb_ r0,hackflags
	cmp r0,#1
	adreq r2,finderops
	adrne r2,normalops
	adr r3,opindex
	mov r4,#3
0:
	ldr r0,[r2,r4,lsl#2]
	ldr r1,[r3,r4,lsl#2]
	str r0,[r1]
	subs r4,r4,#1
	bpl 0b
	
	ldrb_ r4,hackflags
	subs r4,r4,#2
	bmi 1f
	adr r2,jmpops
	ldr r0,[r2,r4,lsl#2]
	ldr r1,[r3,r4,lsl#2]
	str r0,[r1]
	
	ldrb_ r1,hackflags2
	strb r1,[r0,#5*4]
1:
	ldmfd sp!,{r0-r4,r10}
	bx lr
	.endif

	.if SPEEDHACKS_OLD
	bl cpuhack_reset
	.endif

.if SPEEDHACKS_OLD
simple_speedhack_test:
	@is it ld a,(Cxxx/Dxxx) (FA)
	ldrb r0,[gb_pc]
	cmp r0,#0xFA
	bne_long _fetch8
	@bxne lr
	ldrb r0,[gb_pc,#2]
	and r0,r0,#0xE0
	cmp r0,#0xC0
	bne_long _fetch8
	@bxne lr
	
	@is it "cp #" (FE) or "and a"  (A7)
	ldrb r0,[gb_pc,#3]
	cmp r0,#0xFE
	cmpne r0,#0xA7
	@peform the speedhack
	andeq cycles,cycles,#CYC_MASK
	b_long _fetch8
	@bx lr
.endif


